
HAL_MANUEL_LIBRARY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000710  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000898  08000898  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000898  08000898  00010898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800089c  0800089c  0001089c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080008a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000060  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000006c  2000006c  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007be5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000010cb  00000000  00000000  00027c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003ac6  00000000  00000000  00028cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000528  00000000  00000000  0002c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000640  00000000  00000000  0002cce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000027bf  00000000  00000000  0002d320  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002515  00000000  00000000  0002fadf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00031ff4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000e78  00000000  00000000  00032070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000880 	.word	0x08000880

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000880 	.word	0x08000880

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f8aa 	bl	8000338 <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f85e 	bl	80002b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
{
 8000210:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000212:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <HAL_Init+0x30>)
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800021a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000222:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800022a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800022c:	2003      	movs	r0, #3
 800022e:	f000 f82f 	bl	8000290 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000232:	2000      	movs	r0, #0
 8000234:	f7ff ffc8 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000238:	f000 fa72 	bl	8000720 <HAL_MspInit>
}
 800023c:	2000      	movs	r0, #0
 800023e:	bd08      	pop	{r3, pc}
 8000240:	40023c00 	.word	0x40023c00

08000244 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <HAL_IncTick+0x10>)
 8000246:	4b04      	ldr	r3, [pc, #16]	; (8000258 <HAL_IncTick+0x14>)
 8000248:	6811      	ldr	r1, [r2, #0]
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	440b      	add	r3, r1
 800024e:	6013      	str	r3, [r2, #0]
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028
 8000258:	20000000 	.word	0x20000000

0800025c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800025c:	4b01      	ldr	r3, [pc, #4]	; (8000264 <HAL_GetTick+0x8>)
 800025e:	6818      	ldr	r0, [r3, #0]
}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000028 	.word	0x20000028

08000268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000268:	b538      	push	{r3, r4, r5, lr}
 800026a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800026c:	f7ff fff6 	bl	800025c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000270:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000272:	bf1c      	itt	ne
 8000274:	4b05      	ldrne	r3, [pc, #20]	; (800028c <HAL_Delay+0x24>)
 8000276:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000278:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800027a:	bf18      	it	ne
 800027c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800027e:	f7ff ffed 	bl	800025c <HAL_GetTick>
 8000282:	1b40      	subs	r0, r0, r5
 8000284:	4284      	cmp	r4, r0
 8000286:	d8fa      	bhi.n	800027e <HAL_Delay+0x16>
  {
  }
}
 8000288:	bd38      	pop	{r3, r4, r5, pc}
 800028a:	bf00      	nop
 800028c:	20000000 	.word	0x20000000

08000290 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000290:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000292:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000294:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000298:	041b      	lsls	r3, r3, #16
 800029a:	0c1b      	lsrs	r3, r3, #16
 800029c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002a0:	0200      	lsls	r0, r0, #8
 80002a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80002aa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002ac:	60d3      	str	r3, [r2, #12]
 80002ae:	4770      	bx	lr
 80002b0:	e000ed00 	.word	0xe000ed00

080002b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b4:	4b17      	ldr	r3, [pc, #92]	; (8000314 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002b6:	b530      	push	{r4, r5, lr}
 80002b8:	68dc      	ldr	r4, [r3, #12]
 80002ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002c4:	2b04      	cmp	r3, #4
 80002c6:	bf28      	it	cs
 80002c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ca:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	f04f 0501 	mov.w	r5, #1
 80002d0:	fa05 f303 	lsl.w	r3, r5, r3
 80002d4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d8:	bf8c      	ite	hi
 80002da:	3c03      	subhi	r4, #3
 80002dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002de:	4019      	ands	r1, r3
 80002e0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002e2:	fa05 f404 	lsl.w	r4, r5, r4
 80002e6:	3c01      	subs	r4, #1
 80002e8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80002ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ec:	ea42 0201 	orr.w	r2, r2, r1
 80002f0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f4:	bfad      	iteet	ge
 80002f6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	f000 000f 	andlt.w	r0, r0, #15
 80002fe:	4b06      	ldrlt	r3, [pc, #24]	; (8000318 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000300:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	bfb5      	itete	lt
 8000306:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000308:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	bf00      	nop
 8000314:	e000ed00 	.word	0xe000ed00
 8000318:	e000ed14 	.word	0xe000ed14

0800031c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800031c:	2800      	cmp	r0, #0
 800031e:	db08      	blt.n	8000332 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000320:	0942      	lsrs	r2, r0, #5
 8000322:	2301      	movs	r3, #1
 8000324:	f000 001f 	and.w	r0, r0, #31
 8000328:	fa03 f000 	lsl.w	r0, r3, r0
 800032c:	4b01      	ldr	r3, [pc, #4]	; (8000334 <HAL_NVIC_EnableIRQ+0x18>)
 800032e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000332:	4770      	bx	lr
 8000334:	e000e100 	.word	0xe000e100

08000338 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000338:	3801      	subs	r0, #1
 800033a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800033e:	d20a      	bcs.n	8000356 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000342:	4a07      	ldr	r2, [pc, #28]	; (8000360 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000344:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000346:	21f0      	movs	r1, #240	; 0xf0
 8000348:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800034c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800034e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000350:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000356:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	e000e010 	.word	0xe000e010
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000364:	4770      	bx	lr

08000366 <HAL_SYSTICK_IRQHandler>:
{
 8000366:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000368:	f7ff fffc 	bl	8000364 <HAL_SYSTICK_Callback>
 800036c:	bd08      	pop	{r3, pc}
	...

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000374:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000376:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000378:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000528 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800037c:	4a68      	ldr	r2, [pc, #416]	; (8000520 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800037e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800052c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000382:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000384:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000386:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000388:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800038a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800038c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800038e:	42ac      	cmp	r4, r5
 8000390:	f040 80b0 	bne.w	80004f4 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000394:	684c      	ldr	r4, [r1, #4]
 8000396:	f024 0c10 	bic.w	ip, r4, #16
 800039a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800039e:	2e01      	cmp	r6, #1
 80003a0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80003a4:	d812      	bhi.n	80003cc <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80003a6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003a8:	2603      	movs	r6, #3
 80003aa:	fa06 f60e 	lsl.w	r6, r6, lr
 80003ae:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003b2:	68ce      	ldr	r6, [r1, #12]
 80003b4:	fa06 f60e 	lsl.w	r6, r6, lr
 80003b8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80003ba:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003bc:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003be:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003c2:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003c6:	409e      	lsls	r6, r3
 80003c8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80003ca:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003cc:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80003ce:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003d0:	fa06 f60e 	lsl.w	r6, r6, lr
 80003d4:	43f6      	mvns	r6, r6
 80003d6:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003da:	688f      	ldr	r7, [r1, #8]
 80003dc:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e0:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003e4:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80003e8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003ea:	d116      	bne.n	800041a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80003ec:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80003f0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003f4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80003f8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003fc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000400:	f04f 0c0f 	mov.w	ip, #15
 8000404:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000408:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800040c:	690f      	ldr	r7, [r1, #16]
 800040e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000412:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000416:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800041a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800041c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800041e:	f004 0703 	and.w	r7, r4, #3
 8000422:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000426:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800042a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800042c:	00e6      	lsls	r6, r4, #3
 800042e:	d561      	bpl.n	80004f4 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000430:	f04f 0b00 	mov.w	fp, #0
 8000434:	f8cd b00c 	str.w	fp, [sp, #12]
 8000438:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043c:	4e39      	ldr	r6, [pc, #228]	; (8000524 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000442:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000446:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800044a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800044e:	9703      	str	r7, [sp, #12]
 8000450:	9f03      	ldr	r7, [sp, #12]
 8000452:	f023 0703 	bic.w	r7, r3, #3
 8000456:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800045a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800045e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000462:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000466:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800046a:	f04f 0e0f 	mov.w	lr, #15
 800046e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000472:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000474:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000478:	d043      	beq.n	8000502 <HAL_GPIO_Init+0x192>
 800047a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800047e:	42b0      	cmp	r0, r6
 8000480:	d041      	beq.n	8000506 <HAL_GPIO_Init+0x196>
 8000482:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000486:	42b0      	cmp	r0, r6
 8000488:	d03f      	beq.n	800050a <HAL_GPIO_Init+0x19a>
 800048a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800048e:	42b0      	cmp	r0, r6
 8000490:	d03d      	beq.n	800050e <HAL_GPIO_Init+0x19e>
 8000492:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000496:	42b0      	cmp	r0, r6
 8000498:	d03b      	beq.n	8000512 <HAL_GPIO_Init+0x1a2>
 800049a:	4548      	cmp	r0, r9
 800049c:	d03b      	beq.n	8000516 <HAL_GPIO_Init+0x1a6>
 800049e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80004a2:	42b0      	cmp	r0, r6
 80004a4:	d039      	beq.n	800051a <HAL_GPIO_Init+0x1aa>
 80004a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80004aa:	42b0      	cmp	r0, r6
 80004ac:	bf14      	ite	ne
 80004ae:	2608      	movne	r6, #8
 80004b0:	2607      	moveq	r6, #7
 80004b2:	fa06 f60c 	lsl.w	r6, r6, ip
 80004b6:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80004ba:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80004bc:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80004be:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004c0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80004c4:	bf0c      	ite	eq
 80004c6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80004c8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80004ca:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80004cc:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ce:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004d2:	bf0c      	ite	eq
 80004d4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80004d6:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80004d8:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004da:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004dc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004e0:	bf0c      	ite	eq
 80004e2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80004e4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80004e6:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80004e8:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004ea:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004ec:	bf54      	ite	pl
 80004ee:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80004f0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80004f2:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004f4:	3301      	adds	r3, #1
 80004f6:	2b10      	cmp	r3, #16
 80004f8:	f47f af45 	bne.w	8000386 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80004fc:	b005      	add	sp, #20
 80004fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000502:	465e      	mov	r6, fp
 8000504:	e7d5      	b.n	80004b2 <HAL_GPIO_Init+0x142>
 8000506:	2601      	movs	r6, #1
 8000508:	e7d3      	b.n	80004b2 <HAL_GPIO_Init+0x142>
 800050a:	2602      	movs	r6, #2
 800050c:	e7d1      	b.n	80004b2 <HAL_GPIO_Init+0x142>
 800050e:	2603      	movs	r6, #3
 8000510:	e7cf      	b.n	80004b2 <HAL_GPIO_Init+0x142>
 8000512:	2604      	movs	r6, #4
 8000514:	e7cd      	b.n	80004b2 <HAL_GPIO_Init+0x142>
 8000516:	2605      	movs	r6, #5
 8000518:	e7cb      	b.n	80004b2 <HAL_GPIO_Init+0x142>
 800051a:	2606      	movs	r6, #6
 800051c:	e7c9      	b.n	80004b2 <HAL_GPIO_Init+0x142>
 800051e:	bf00      	nop
 8000520:	40013c00 	.word	0x40013c00
 8000524:	40020000 	.word	0x40020000
 8000528:	40023800 	.word	0x40023800
 800052c:	40021400 	.word	0x40021400

08000530 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000530:	6943      	ldr	r3, [r0, #20]
 8000532:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000536:	bf08      	it	eq
 8000538:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800053a:	6181      	str	r1, [r0, #24]
 800053c:	4770      	bx	lr

0800053e <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800053e:	6803      	ldr	r3, [r0, #0]
 8000540:	68da      	ldr	r2, [r3, #12]
 8000542:	f042 0201 	orr.w	r2, r2, #1
 8000546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000548:	689a      	ldr	r2, [r3, #8]
 800054a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800054e:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000550:	bf1e      	ittt	ne
 8000552:	681a      	ldrne	r2, [r3, #0]
 8000554:	f042 0201 	orrne.w	r2, r2, #1
 8000558:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800055a:	2000      	movs	r0, #0
 800055c:	4770      	bx	lr
	...

08000560 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000560:	4a30      	ldr	r2, [pc, #192]	; (8000624 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8000562:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000564:	4290      	cmp	r0, r2
 8000566:	d012      	beq.n	800058e <TIM_Base_SetConfig+0x2e>
 8000568:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800056c:	d00f      	beq.n	800058e <TIM_Base_SetConfig+0x2e>
 800056e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000572:	4290      	cmp	r0, r2
 8000574:	d00b      	beq.n	800058e <TIM_Base_SetConfig+0x2e>
 8000576:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800057a:	4290      	cmp	r0, r2
 800057c:	d007      	beq.n	800058e <TIM_Base_SetConfig+0x2e>
 800057e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000582:	4290      	cmp	r0, r2
 8000584:	d003      	beq.n	800058e <TIM_Base_SetConfig+0x2e>
 8000586:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800058a:	4290      	cmp	r0, r2
 800058c:	d119      	bne.n	80005c2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800058e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000594:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000596:	4a23      	ldr	r2, [pc, #140]	; (8000624 <TIM_Base_SetConfig+0xc4>)
 8000598:	4290      	cmp	r0, r2
 800059a:	d029      	beq.n	80005f0 <TIM_Base_SetConfig+0x90>
 800059c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80005a0:	d026      	beq.n	80005f0 <TIM_Base_SetConfig+0x90>
 80005a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80005a6:	4290      	cmp	r0, r2
 80005a8:	d022      	beq.n	80005f0 <TIM_Base_SetConfig+0x90>
 80005aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80005ae:	4290      	cmp	r0, r2
 80005b0:	d01e      	beq.n	80005f0 <TIM_Base_SetConfig+0x90>
 80005b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80005b6:	4290      	cmp	r0, r2
 80005b8:	d01a      	beq.n	80005f0 <TIM_Base_SetConfig+0x90>
 80005ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80005be:	4290      	cmp	r0, r2
 80005c0:	d016      	beq.n	80005f0 <TIM_Base_SetConfig+0x90>
 80005c2:	4a19      	ldr	r2, [pc, #100]	; (8000628 <TIM_Base_SetConfig+0xc8>)
 80005c4:	4290      	cmp	r0, r2
 80005c6:	d013      	beq.n	80005f0 <TIM_Base_SetConfig+0x90>
 80005c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80005cc:	4290      	cmp	r0, r2
 80005ce:	d00f      	beq.n	80005f0 <TIM_Base_SetConfig+0x90>
 80005d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80005d4:	4290      	cmp	r0, r2
 80005d6:	d00b      	beq.n	80005f0 <TIM_Base_SetConfig+0x90>
 80005d8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80005dc:	4290      	cmp	r0, r2
 80005de:	d007      	beq.n	80005f0 <TIM_Base_SetConfig+0x90>
 80005e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80005e4:	4290      	cmp	r0, r2
 80005e6:	d003      	beq.n	80005f0 <TIM_Base_SetConfig+0x90>
 80005e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80005ec:	4290      	cmp	r0, r2
 80005ee:	d103      	bne.n	80005f8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80005f0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80005f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80005f6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80005f8:	694a      	ldr	r2, [r1, #20]
 80005fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005fe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000600:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000602:	688b      	ldr	r3, [r1, #8]
 8000604:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000606:	680b      	ldr	r3, [r1, #0]
 8000608:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <TIM_Base_SetConfig+0xc4>)
 800060c:	4298      	cmp	r0, r3
 800060e:	d003      	beq.n	8000618 <TIM_Base_SetConfig+0xb8>
 8000610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000614:	4298      	cmp	r0, r3
 8000616:	d101      	bne.n	800061c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000618:	690b      	ldr	r3, [r1, #16]
 800061a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800061c:	2301      	movs	r3, #1
 800061e:	6143      	str	r3, [r0, #20]
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40010000 	.word	0x40010000
 8000628:	40014000 	.word	0x40014000

0800062c <HAL_TIM_Base_Init>:
{
 800062c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800062e:	4604      	mov	r4, r0
 8000630:	b1a0      	cbz	r0, 800065c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000632:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000636:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800063a:	b91b      	cbnz	r3, 8000644 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800063c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000640:	f000 f88e 	bl	8000760 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000644:	2302      	movs	r3, #2
 8000646:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800064a:	6820      	ldr	r0, [r4, #0]
 800064c:	1d21      	adds	r1, r4, #4
 800064e:	f7ff ff87 	bl	8000560 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000652:	2301      	movs	r3, #1
 8000654:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000658:	2000      	movs	r0, #0
 800065a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800065c:	2001      	movs	r0, #1
}
 800065e:	bd10      	pop	{r4, pc}

08000660 <TIM4_IRQHandler>:


#include "main.h"
extern TIM_HandleTypeDef tim4_set;
void TIM4_IRQHandler(void)
{
 8000660:	b508      	push	{r3, lr}

	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12|GPIO_PIN_13);
 8000662:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <TIM4_IRQHandler+0x18>)
 8000668:	f7ff ff62 	bl	8000530 <HAL_GPIO_TogglePin>
	__HAL_TIM_CLEAR_FLAG(&tim4_set,TIM_IT_UPDATE);
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <TIM4_IRQHandler+0x1c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f06f 0201 	mvn.w	r2, #1
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	bd08      	pop	{r3, pc}
 8000678:	40020c00 	.word	0x40020c00
 800067c:	2000002c 	.word	0x2000002c

08000680 <SysTick_Handler>:

}


void SysTick_Handler (void)
{
 8000680:	b508      	push	{r3, lr}
	HAL_IncTick();
 8000682:	f7ff fddf 	bl	8000244 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
}
 8000686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SYSTICK_IRQHandler();
 800068a:	f7ff be6c 	b.w	8000366 <HAL_SYSTICK_IRQHandler>
	...

08000690 <TIM4_Init>:
}

void TIM4_Init()
{

	tim4_set.Instance = TIM4;
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <TIM4_Init+0x28>)
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <TIM4_Init+0x2c>)
 8000694:	6003      	str	r3, [r0, #0]
	tim4_set.Channel = TIM_CHANNEL_1;
 8000696:	2300      	movs	r3, #0
	tim4_set.Init.AutoReloadPreload	= TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000698:	2280      	movs	r2, #128	; 0x80
	tim4_set.Channel = TIM_CHANNEL_1;
 800069a:	7703      	strb	r3, [r0, #28]
	tim4_set.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
	tim4_set.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069c:	6083      	str	r3, [r0, #8]
	tim4_set.Init.Period = 40000;
 800069e:	f649 4340 	movw	r3, #40000	; 0x9c40
	tim4_set.Init.AutoReloadPreload	= TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006a2:	6182      	str	r2, [r0, #24]
	tim4_set.Init.Period = 40000;
 80006a4:	60c3      	str	r3, [r0, #12]
	tim4_set.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80006a6:	f44f 7200 	mov.w	r2, #512	; 0x200
	tim4_set.Init.Prescaler = 1000;
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	tim4_set.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80006ae:	6102      	str	r2, [r0, #16]
	tim4_set.Init.Prescaler = 1000;
 80006b0:	6043      	str	r3, [r0, #4]
	HAL_TIM_Base_Init(&tim4_set);
 80006b2:	f7ff bfbb 	b.w	800062c <HAL_TIM_Base_Init>
 80006b6:	bf00      	nop
 80006b8:	2000002c 	.word	0x2000002c
 80006bc:	40000800 	.word	0x40000800

080006c0 <main>:
{
 80006c0:	b508      	push	{r3, lr}
HAL_Init();
 80006c2:	f7ff fda5 	bl	8000210 <HAL_Init>
TIM4_Init();
 80006c6:	f7ff ffe3 	bl	8000690 <TIM4_Init>
HAL_TIM_Base_Start_IT(&tim4_set);
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <main+0x54>)
 80006cc:	f7ff ff37 	bl	800053e <HAL_TIM_Base_Start_IT>
HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14|GPIO_PIN_15);
 80006d0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006d4:	4810      	ldr	r0, [pc, #64]	; (8000718 <main+0x58>)
 80006d6:	f7ff ff2b 	bl	8000530 <HAL_GPIO_TogglePin>
HAL_Delay(300);
 80006da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006de:	f7ff fdc3 	bl	8000268 <HAL_Delay>
HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14|GPIO_PIN_15);
 80006e2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <main+0x58>)
 80006e8:	f7ff ff22 	bl	8000530 <HAL_GPIO_TogglePin>
HAL_Delay(300);
 80006ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006f0:	f7ff fdba 	bl	8000268 <HAL_Delay>
HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14|GPIO_PIN_15);
 80006f4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <main+0x58>)
 80006fa:	f7ff ff19 	bl	8000530 <HAL_GPIO_TogglePin>
HAL_Delay(300);
 80006fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000702:	f7ff fdb1 	bl	8000268 <HAL_Delay>
SCB->SCR |= (1<<1);
 8000706:	4a05      	ldr	r2, [pc, #20]	; (800071c <main+0x5c>)
 8000708:	6913      	ldr	r3, [r2, #16]
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	6113      	str	r3, [r2, #16]
 8000710:	e7fe      	b.n	8000710 <main+0x50>
 8000712:	bf00      	nop
 8000714:	2000002c 	.word	0x2000002c
 8000718:	40020c00 	.word	0x40020c00
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <HAL_MspInit>:
 *      Author: muhammetkocak
 */
#include "main.h"
extern TIM_HandleTypeDef tim4_set;
void HAL_MspInit(void)
{
 8000720:	b508      	push	{r3, lr}
	//1- set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000722:	2003      	movs	r0, #3
 8000724:	f7ff fdb4 	bl	8000290 <HAL_NVIC_SetPriorityGrouping>
	//2-enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 7<<16; //usage fault, memory fault and bus fault system exception
 8000728:	4a0c      	ldr	r2, [pc, #48]	; (800075c <HAL_MspInit+0x3c>)
 800072a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800072c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000730:	6253      	str	r3, [r2, #36]	; 0x24
	//3-set the priority of the exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);//Both sub and first priority is highest
 8000732:	2200      	movs	r2, #0
 8000734:	4611      	mov	r1, r2
 8000736:	f06f 000b 	mvn.w	r0, #11
 800073a:	f7ff fdbb 	bl	80002b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);//Both sub and first priority is highest
 800073e:	2200      	movs	r2, #0
 8000740:	4611      	mov	r1, r2
 8000742:	f06f 000a 	mvn.w	r0, #10
 8000746:	f7ff fdb5 	bl	80002b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);//Both sub and first priority is highes
 800074a:	2200      	movs	r2, #0
 800074c:	4611      	mov	r1, r2
 800074e:	f06f 0009 	mvn.w	r0, #9
}
 8000752:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);//Both sub and first priority is highes
 8000756:	f7ff bdad 	b.w	80002b4 <HAL_NVIC_SetPriority>
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <HAL_TIM_Base_MspInit>:



void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000760:	b510      	push	{r4, lr}
 8000762:	b088      	sub	sp, #32
	__HAL_RCC_TIM4_CLK_ENABLE();
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <HAL_TIM_Base_MspInit+0x60>)
	GPIO_InitTypeDef gpio_tim;
	gpio_tim.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |GPIO_PIN_15;
	gpio_tim.Mode = GPIO_MODE_OUTPUT_PP;
	gpio_tim.Pull = GPIO_PULLDOWN;
	gpio_tim.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(GPIOD,&gpio_tim);
 8000766:	4817      	ldr	r0, [pc, #92]	; (80007c4 <HAL_TIM_Base_MspInit+0x64>)
	__HAL_RCC_TIM4_CLK_ENABLE();
 8000768:	2400      	movs	r4, #0
 800076a:	9401      	str	r4, [sp, #4]
 800076c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800076e:	f042 0204 	orr.w	r2, r2, #4
 8000772:	641a      	str	r2, [r3, #64]	; 0x40
 8000774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000776:	f002 0204 	and.w	r2, r2, #4
 800077a:	9201      	str	r2, [sp, #4]
 800077c:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	9402      	str	r4, [sp, #8]
 8000780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000782:	f042 0208 	orr.w	r2, r2, #8
 8000786:	631a      	str	r2, [r3, #48]	; 0x30
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	9b02      	ldr	r3, [sp, #8]
	gpio_tim.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |GPIO_PIN_15;
 8000792:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000796:	9303      	str	r3, [sp, #12]
	gpio_tim.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	9304      	str	r3, [sp, #16]
	gpio_tim.Pull = GPIO_PULLDOWN;
 800079c:	2302      	movs	r3, #2
 800079e:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOD,&gpio_tim);
 80007a0:	a903      	add	r1, sp, #12
	gpio_tim.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(GPIOD,&gpio_tim);
 80007a6:	f7ff fde3 	bl	8000370 <HAL_GPIO_Init>



	HAL_NVIC_SetPriority(TIM4_IRQn,15,0);
 80007aa:	4622      	mov	r2, r4
 80007ac:	210f      	movs	r1, #15
 80007ae:	201e      	movs	r0, #30
 80007b0:	f7ff fd80 	bl	80002b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007b4:	201e      	movs	r0, #30
 80007b6:	f7ff fdb1 	bl	800031c <HAL_NVIC_EnableIRQ>




}
 80007ba:	b008      	add	sp, #32
 80007bc:	bd10      	pop	{r4, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020c00 	.word	0x40020c00

080007c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <SystemInit+0x18>)
 80007ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80007ce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80007d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800081c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007ea:	e003      	b.n	80007f4 <LoopCopyDataInit>

080007ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80007ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007f2:	3104      	adds	r1, #4

080007f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007f4:	480b      	ldr	r0, [pc, #44]	; (8000824 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80007f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007fc:	d3f6      	bcc.n	80007ec <CopyDataInit>
  ldr  r2, =_sbss
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000800:	e002      	b.n	8000808 <LoopFillZerobss>

08000802 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000802:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000804:	f842 3b04 	str.w	r3, [r2], #4

08000808 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800080a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800080c:	d3f9      	bcc.n	8000802 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800080e:	f7ff ffdb 	bl	80007c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000812:	f000 f811 	bl	8000838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000816:	f7ff ff53 	bl	80006c0 <main>
  bx  lr    
 800081a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800081c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000820:	080008a0 	.word	0x080008a0
  ldr  r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000828:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800082c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000830:	2000006c 	.word	0x2000006c

08000834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC_IRQHandler>
	...

08000838 <__libc_init_array>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	4e0d      	ldr	r6, [pc, #52]	; (8000870 <__libc_init_array+0x38>)
 800083c:	4c0d      	ldr	r4, [pc, #52]	; (8000874 <__libc_init_array+0x3c>)
 800083e:	1ba4      	subs	r4, r4, r6
 8000840:	10a4      	asrs	r4, r4, #2
 8000842:	2500      	movs	r5, #0
 8000844:	42a5      	cmp	r5, r4
 8000846:	d109      	bne.n	800085c <__libc_init_array+0x24>
 8000848:	4e0b      	ldr	r6, [pc, #44]	; (8000878 <__libc_init_array+0x40>)
 800084a:	4c0c      	ldr	r4, [pc, #48]	; (800087c <__libc_init_array+0x44>)
 800084c:	f000 f818 	bl	8000880 <_init>
 8000850:	1ba4      	subs	r4, r4, r6
 8000852:	10a4      	asrs	r4, r4, #2
 8000854:	2500      	movs	r5, #0
 8000856:	42a5      	cmp	r5, r4
 8000858:	d105      	bne.n	8000866 <__libc_init_array+0x2e>
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000860:	4798      	blx	r3
 8000862:	3501      	adds	r5, #1
 8000864:	e7ee      	b.n	8000844 <__libc_init_array+0xc>
 8000866:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800086a:	4798      	blx	r3
 800086c:	3501      	adds	r5, #1
 800086e:	e7f2      	b.n	8000856 <__libc_init_array+0x1e>
 8000870:	08000898 	.word	0x08000898
 8000874:	08000898 	.word	0x08000898
 8000878:	08000898 	.word	0x08000898
 800087c:	0800089c 	.word	0x0800089c

08000880 <_init>:
 8000880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000882:	bf00      	nop
 8000884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000886:	bc08      	pop	{r3}
 8000888:	469e      	mov	lr, r3
 800088a:	4770      	bx	lr

0800088c <_fini>:
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088e:	bf00      	nop
 8000890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000892:	bc08      	pop	{r3}
 8000894:	469e      	mov	lr, r3
 8000896:	4770      	bx	lr
