
HAL_MANUEL_LIBRARY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bac  08000bac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000bac  08000bac  00010bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000bb0  08000bb0  00010bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005d4b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001302  00000000  00000000  00025d87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a30  00000000  00000000  00027089  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000408  00000000  00000000  00028ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000470  00000000  00000000  00028ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000022fd  00000000  00000000  00029338  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001c51  00000000  00000000  0002b635  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002d286  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000928  00000000  00000000  0002d304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b94 	.word	0x08000b94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000b94 	.word	0x08000b94

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 fae4 	bl	80007ac <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 fa98 	bl	8000728 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
{
 8000210:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000212:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <HAL_Init+0x30>)
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800021a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000222:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800022a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800022c:	2003      	movs	r0, #3
 800022e:	f000 fa69 	bl	8000704 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000232:	2000      	movs	r0, #0
 8000234:	f7ff ffc8 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000238:	f000 fc00 	bl	8000a3c <HAL_MspInit>
}
 800023c:	2000      	movs	r0, #0
 800023e:	bd08      	pop	{r3, pc}
 8000240:	40023c00 	.word	0x40023c00

08000244 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <HAL_IncTick+0x10>)
 8000246:	4b04      	ldr	r3, [pc, #16]	; (8000258 <HAL_IncTick+0x14>)
 8000248:	6811      	ldr	r1, [r2, #0]
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	440b      	add	r3, r1
 800024e:	6013      	str	r3, [r2, #0]
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028
 8000258:	20000000 	.word	0x20000000

0800025c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800025c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800025e:	4604      	mov	r4, r0
 8000260:	2800      	cmp	r0, #0
 8000262:	f000 809b 	beq.w	800039c <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000266:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000268:	b925      	cbnz	r5, 8000274 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800026a:	f000 fc07 	bl	8000a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800026e:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000270:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000274:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000276:	06db      	lsls	r3, r3, #27
 8000278:	f100 808e 	bmi.w	8000398 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800027c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800027e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000282:	f023 0302 	bic.w	r3, r3, #2
 8000286:	f043 0302 	orr.w	r3, r3, #2
 800028a:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800028c:	4b44      	ldr	r3, [pc, #272]	; (80003a0 <HAL_ADC_Init+0x144>)
 800028e:	685a      	ldr	r2, [r3, #4]
 8000290:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000294:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000296:	685a      	ldr	r2, [r3, #4]
 8000298:	6861      	ldr	r1, [r4, #4]
 800029a:	430a      	orrs	r2, r1
 800029c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800029e:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002a0:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002a2:	685a      	ldr	r2, [r3, #4]
 80002a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80002a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002aa:	685a      	ldr	r2, [r3, #4]
 80002ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80002b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80002b2:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80002b4:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80002b6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80002ba:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80002bc:	685a      	ldr	r2, [r3, #4]
 80002be:	430a      	orrs	r2, r1
 80002c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80002c2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80002c4:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80002c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80002ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80002cc:	689a      	ldr	r2, [r3, #8]
 80002ce:	430a      	orrs	r2, r1
 80002d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80002d2:	4934      	ldr	r1, [pc, #208]	; (80003a4 <HAL_ADC_Init+0x148>)
 80002d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002d6:	428a      	cmp	r2, r1
 80002d8:	d052      	beq.n	8000380 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80002da:	6899      	ldr	r1, [r3, #8]
 80002dc:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80002e0:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80002e2:	6899      	ldr	r1, [r3, #8]
 80002e4:	430a      	orrs	r2, r1
 80002e6:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80002e8:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80002ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80002ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80002f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80002f2:	689a      	ldr	r2, [r3, #8]
 80002f4:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80002f6:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80002f8:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80002fa:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80002fc:	f022 0202 	bic.w	r2, r2, #2
 8000300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000302:	689a      	ldr	r2, [r3, #8]
 8000304:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000308:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800030a:	f894 2020 	ldrb.w	r2, [r4, #32]
 800030e:	2a00      	cmp	r2, #0
 8000310:	d03e      	beq.n	8000390 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000312:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000314:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800031a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800031c:	685a      	ldr	r2, [r3, #4]
 800031e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000322:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000324:	685a      	ldr	r2, [r3, #4]
 8000326:	3901      	subs	r1, #1
 8000328:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800032c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800032e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000330:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000332:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800033a:	3901      	subs	r1, #1
 800033c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000340:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000342:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000344:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000348:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800034c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000354:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000356:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000358:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800035a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800035e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000360:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000362:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000364:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000368:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800036a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800036c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000378:	2300      	movs	r3, #0
 800037a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800037e:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000380:	689a      	ldr	r2, [r3, #8]
 8000382:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000386:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000388:	689a      	ldr	r2, [r3, #8]
 800038a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800038e:	e7b2      	b.n	80002f6 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000390:	685a      	ldr	r2, [r3, #4]
 8000392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000396:	e7c9      	b.n	800032c <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8000398:	2001      	movs	r0, #1
 800039a:	e7ed      	b.n	8000378 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 800039c:	2001      	movs	r0, #1
}
 800039e:	bd38      	pop	{r3, r4, r5, pc}
 80003a0:	40012300 	.word	0x40012300
 80003a4:	0f000001 	.word	0x0f000001

080003a8 <HAL_ADC_Start_IT>:
{
 80003a8:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80003aa:	2300      	movs	r3, #0
 80003ac:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80003ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d067      	beq.n	8000486 <HAL_ADC_Start_IT+0xde>
 80003b6:	2301      	movs	r3, #1
 80003b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80003bc:	6803      	ldr	r3, [r0, #0]
 80003be:	689a      	ldr	r2, [r3, #8]
 80003c0:	07d1      	lsls	r1, r2, #31
 80003c2:	d505      	bpl.n	80003d0 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80003c4:	689a      	ldr	r2, [r3, #8]
 80003c6:	07d2      	lsls	r2, r2, #31
 80003c8:	d414      	bmi.n	80003f4 <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 80003ca:	2000      	movs	r0, #0
}
 80003cc:	b002      	add	sp, #8
 80003ce:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80003d0:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003d2:	492e      	ldr	r1, [pc, #184]	; (800048c <HAL_ADC_Start_IT+0xe4>)
    __HAL_ADC_ENABLE(hadc);
 80003d4:	f042 0201 	orr.w	r2, r2, #1
 80003d8:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003da:	4a2d      	ldr	r2, [pc, #180]	; (8000490 <HAL_ADC_Start_IT+0xe8>)
 80003dc:	6812      	ldr	r2, [r2, #0]
 80003de:	fbb2 f2f1 	udiv	r2, r2, r1
 80003e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80003e6:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80003e8:	9a01      	ldr	r2, [sp, #4]
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d0ea      	beq.n	80003c4 <HAL_ADC_Start_IT+0x1c>
      counter--;
 80003ee:	9a01      	ldr	r2, [sp, #4]
 80003f0:	3a01      	subs	r2, #1
 80003f2:	e7f8      	b.n	80003e6 <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80003f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80003f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80003fa:	f022 0201 	bic.w	r2, r2, #1
 80003fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000402:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000408:	bf41      	itttt	mi
 800040a:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 800040c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000410:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000414:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000416:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800041c:	bf1c      	itt	ne
 800041e:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000420:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000424:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000426:	2200      	movs	r2, #0
 8000428:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800042c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000430:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000432:	685a      	ldr	r2, [r3, #4]
 8000434:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000438:	f042 0220 	orr.w	r2, r2, #32
 800043c:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800043e:	4a15      	ldr	r2, [pc, #84]	; (8000494 <HAL_ADC_Start_IT+0xec>)
 8000440:	6851      	ldr	r1, [r2, #4]
 8000442:	f011 0f1f 	tst.w	r1, #31
 8000446:	4914      	ldr	r1, [pc, #80]	; (8000498 <HAL_ADC_Start_IT+0xf0>)
 8000448:	d11a      	bne.n	8000480 <HAL_ADC_Start_IT+0xd8>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800044a:	428b      	cmp	r3, r1
 800044c:	d006      	beq.n	800045c <HAL_ADC_Start_IT+0xb4>
 800044e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8000452:	428b      	cmp	r3, r1
 8000454:	d10b      	bne.n	800046e <HAL_ADC_Start_IT+0xc6>
 8000456:	6852      	ldr	r2, [r2, #4]
 8000458:	06d2      	lsls	r2, r2, #27
 800045a:	d1b6      	bne.n	80003ca <HAL_ADC_Start_IT+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800045c:	6898      	ldr	r0, [r3, #8]
 800045e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000462:	d1b2      	bne.n	80003ca <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	e7ae      	b.n	80003cc <HAL_ADC_Start_IT+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800046e:	490b      	ldr	r1, [pc, #44]	; (800049c <HAL_ADC_Start_IT+0xf4>)
 8000470:	428b      	cmp	r3, r1
 8000472:	d1aa      	bne.n	80003ca <HAL_ADC_Start_IT+0x22>
 8000474:	6852      	ldr	r2, [r2, #4]
 8000476:	f002 021f 	and.w	r2, r2, #31
 800047a:	2a0f      	cmp	r2, #15
 800047c:	d9ee      	bls.n	800045c <HAL_ADC_Start_IT+0xb4>
 800047e:	e7a4      	b.n	80003ca <HAL_ADC_Start_IT+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000480:	428b      	cmp	r3, r1
 8000482:	d1a2      	bne.n	80003ca <HAL_ADC_Start_IT+0x22>
 8000484:	e7ea      	b.n	800045c <HAL_ADC_Start_IT+0xb4>
  __HAL_LOCK(hadc);
 8000486:	2002      	movs	r0, #2
 8000488:	e7a0      	b.n	80003cc <HAL_ADC_Start_IT+0x24>
 800048a:	bf00      	nop
 800048c:	000f4240 	.word	0x000f4240
 8000490:	20000008 	.word	0x20000008
 8000494:	40012300 	.word	0x40012300
 8000498:	40012000 	.word	0x40012000
 800049c:	40012200 	.word	0x40012200

080004a0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80004a0:	6803      	ldr	r3, [r0, #0]
 80004a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80004a4:	4770      	bx	lr

080004a6 <HAL_ADC_LevelOutOfWindowCallback>:
 80004a6:	4770      	bx	lr

080004a8 <HAL_ADC_ErrorCallback>:
{
 80004a8:	4770      	bx	lr

080004aa <HAL_ADC_IRQHandler>:
{
 80004aa:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80004ac:	6803      	ldr	r3, [r0, #0]
 80004ae:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80004b0:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80004b2:	078d      	lsls	r5, r1, #30
{
 80004b4:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80004b6:	d52b      	bpl.n	8000510 <HAL_ADC_IRQHandler+0x66>
 80004b8:	0690      	lsls	r0, r2, #26
 80004ba:	d529      	bpl.n	8000510 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80004bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80004be:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80004c0:	bf5e      	ittt	pl
 80004c2:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80004c4:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80004c8:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80004ca:	689a      	ldr	r2, [r3, #8]
 80004cc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80004d0:	d117      	bne.n	8000502 <HAL_ADC_IRQHandler+0x58>
 80004d2:	7e22      	ldrb	r2, [r4, #24]
 80004d4:	b9aa      	cbnz	r2, 8000502 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80004d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80004d8:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80004dc:	d002      	beq.n	80004e4 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80004de:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80004e0:	0552      	lsls	r2, r2, #21
 80004e2:	d40e      	bmi.n	8000502 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80004e4:	685a      	ldr	r2, [r3, #4]
 80004e6:	f022 0220 	bic.w	r2, r2, #32
 80004ea:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80004ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004f2:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004f6:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80004f8:	bf5e      	ittt	pl
 80004fa:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80004fc:	f043 0301 	orrpl.w	r3, r3, #1
 8000500:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000502:	4620      	mov	r0, r4
 8000504:	f000 fa8a 	bl	8000a1c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000508:	6823      	ldr	r3, [r4, #0]
 800050a:	f06f 0212 	mvn.w	r2, #18
 800050e:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000510:	6823      	ldr	r3, [r4, #0]
 8000512:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000514:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000516:	074d      	lsls	r5, r1, #29
 8000518:	d532      	bpl.n	8000580 <HAL_ADC_IRQHandler+0xd6>
 800051a:	0610      	lsls	r0, r2, #24
 800051c:	d530      	bpl.n	8000580 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800051e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000520:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000522:	bf5e      	ittt	pl
 8000524:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000526:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800052a:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800052c:	689a      	ldr	r2, [r3, #8]
 800052e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000532:	d11e      	bne.n	8000572 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000536:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800053a:	d002      	beq.n	8000542 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800053c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800053e:	0552      	lsls	r2, r2, #21
 8000540:	d417      	bmi.n	8000572 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000542:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000544:	0555      	lsls	r5, r2, #21
 8000546:	d414      	bmi.n	8000572 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000548:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800054a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800054e:	d110      	bne.n	8000572 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000550:	7e22      	ldrb	r2, [r4, #24]
 8000552:	b972      	cbnz	r2, 8000572 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000554:	685a      	ldr	r2, [r3, #4]
 8000556:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800055a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800055c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800055e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000562:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000566:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000568:	bf5e      	ittt	pl
 800056a:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 800056c:	f043 0301 	orrpl.w	r3, r3, #1
 8000570:	6423      	strpl	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000572:	4620      	mov	r0, r4
 8000574:	f000 f8c4 	bl	8000700 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000578:	6823      	ldr	r3, [r4, #0]
 800057a:	f06f 020c 	mvn.w	r2, #12
 800057e:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000580:	6823      	ldr	r3, [r4, #0]
 8000582:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000584:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000586:	07c9      	lsls	r1, r1, #31
 8000588:	d50f      	bpl.n	80005aa <HAL_ADC_IRQHandler+0x100>
 800058a:	0655      	lsls	r5, r2, #25
 800058c:	d50d      	bpl.n	80005aa <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	07d8      	lsls	r0, r3, #31
 8000592:	d50a      	bpl.n	80005aa <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000594:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800059a:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800059c:	4620      	mov	r0, r4
 800059e:	f7ff ff82 	bl	80004a6 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	f06f 0201 	mvn.w	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80005ae:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80005b0:	0689      	lsls	r1, r1, #26
 80005b2:	d50d      	bpl.n	80005d0 <HAL_ADC_IRQHandler+0x126>
 80005b4:	0152      	lsls	r2, r2, #5
 80005b6:	d50b      	bpl.n	80005d0 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80005b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80005ba:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80005be:	f042 0202 	orr.w	r2, r2, #2
 80005c2:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 80005c4:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80005c6:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80005c8:	f7ff ff6e 	bl	80004a8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80005cc:	6823      	ldr	r3, [r4, #0]
 80005ce:	601d      	str	r5, [r3, #0]
 80005d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080005d4 <HAL_ADC_ConfigChannel>:
{
 80005d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80005d6:	2300      	movs	r3, #0
 80005d8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80005da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80005de:	2b01      	cmp	r3, #1
 80005e0:	f000 8083 	beq.w	80006ea <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80005e4:	680d      	ldr	r5, [r1, #0]
 80005e6:	6804      	ldr	r4, [r0, #0]
 80005e8:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80005ea:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80005ec:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80005ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80005f2:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80005f4:	d92a      	bls.n	800064c <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80005f6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80005fa:	68e7      	ldr	r7, [r4, #12]
 80005fc:	3b1e      	subs	r3, #30
 80005fe:	f04f 0e07 	mov.w	lr, #7
 8000602:	fa0e fe03 	lsl.w	lr, lr, r3
 8000606:	ea27 070e 	bic.w	r7, r7, lr
 800060a:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800060c:	68e7      	ldr	r7, [r4, #12]
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	433b      	orrs	r3, r7
 8000614:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000616:	684a      	ldr	r2, [r1, #4]
 8000618:	2a06      	cmp	r2, #6
 800061a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800061e:	d825      	bhi.n	800066c <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000620:	4413      	add	r3, r2
 8000622:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000624:	1f59      	subs	r1, r3, #5
 8000626:	231f      	movs	r3, #31
 8000628:	408b      	lsls	r3, r1
 800062a:	ea27 0303 	bic.w	r3, r7, r3
 800062e:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000630:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000632:	fa06 f101 	lsl.w	r1, r6, r1
 8000636:	4311      	orrs	r1, r2
 8000638:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <HAL_ADC_ConfigChannel+0x11c>)
 800063c:	429c      	cmp	r4, r3
 800063e:	d034      	beq.n	80006aa <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8000640:	2300      	movs	r3, #0
 8000642:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000646:	4618      	mov	r0, r3
}
 8000648:	b003      	add	sp, #12
 800064a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800064c:	6927      	ldr	r7, [r4, #16]
 800064e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000652:	f04f 0e07 	mov.w	lr, #7
 8000656:	fa0e fe03 	lsl.w	lr, lr, r3
 800065a:	ea27 070e 	bic.w	r7, r7, lr
 800065e:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000660:	6927      	ldr	r7, [r4, #16]
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	433b      	orrs	r3, r7
 8000668:	6123      	str	r3, [r4, #16]
 800066a:	e7d4      	b.n	8000616 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 800066c:	2a0c      	cmp	r2, #12
 800066e:	d80e      	bhi.n	800068e <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000670:	4413      	add	r3, r2
 8000672:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000674:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000678:	231f      	movs	r3, #31
 800067a:	4093      	lsls	r3, r2
 800067c:	ea21 0303 	bic.w	r3, r1, r3
 8000680:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000682:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000684:	fa06 f202 	lsl.w	r2, r6, r2
 8000688:	431a      	orrs	r2, r3
 800068a:	6322      	str	r2, [r4, #48]	; 0x30
 800068c:	e7d5      	b.n	800063a <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800068e:	4413      	add	r3, r2
 8000690:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000692:	3b41      	subs	r3, #65	; 0x41
 8000694:	221f      	movs	r2, #31
 8000696:	409a      	lsls	r2, r3
 8000698:	ea21 0202 	bic.w	r2, r1, r2
 800069c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800069e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80006a0:	fa06 f103 	lsl.w	r1, r6, r3
 80006a4:	4311      	orrs	r1, r2
 80006a6:	62e1      	str	r1, [r4, #44]	; 0x2c
 80006a8:	e7c7      	b.n	800063a <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80006aa:	2d12      	cmp	r5, #18
 80006ac:	d104      	bne.n	80006b8 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <HAL_ADC_ConfigChannel+0x120>)
 80006b0:	6853      	ldr	r3, [r2, #4]
 80006b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006b6:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80006b8:	f1a5 0310 	sub.w	r3, r5, #16
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d8bf      	bhi.n	8000640 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <HAL_ADC_ConfigChannel+0x120>)
 80006c2:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80006c4:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80006c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006ca:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80006cc:	d1b8      	bne.n	8000640 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <HAL_ADC_ConfigChannel+0x124>)
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <HAL_ADC_ConfigChannel+0x128>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80006d8:	230a      	movs	r3, #10
 80006da:	4353      	muls	r3, r2
        counter--;
 80006dc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80006de:	9b01      	ldr	r3, [sp, #4]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d0ad      	beq.n	8000640 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80006e4:	9b01      	ldr	r3, [sp, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	e7f8      	b.n	80006dc <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80006ea:	2002      	movs	r0, #2
 80006ec:	e7ac      	b.n	8000648 <HAL_ADC_ConfigChannel+0x74>
 80006ee:	bf00      	nop
 80006f0:	40012000 	.word	0x40012000
 80006f4:	40012300 	.word	0x40012300
 80006f8:	20000008 	.word	0x20000008
 80006fc:	000f4240 	.word	0x000f4240

08000700 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000700:	4770      	bx	lr
	...

08000704 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000706:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000708:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800070c:	041b      	lsls	r3, r3, #16
 800070e:	0c1b      	lsrs	r3, r3, #16
 8000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000714:	0200      	lsls	r0, r0, #8
 8000716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800071e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000720:	60d3      	str	r3, [r2, #12]
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	68dc      	ldr	r4, [r3, #12]
 800072e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000732:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000736:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	2b04      	cmp	r3, #4
 800073a:	bf28      	it	cs
 800073c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 0501 	mov.w	r5, #1
 8000744:	fa05 f303 	lsl.w	r3, r5, r3
 8000748:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074c:	bf8c      	ite	hi
 800074e:	3c03      	subhi	r4, #3
 8000750:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000752:	4019      	ands	r1, r3
 8000754:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000756:	fa05 f404 	lsl.w	r4, r5, r4
 800075a:	3c01      	subs	r4, #1
 800075c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800075e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	ea42 0201 	orr.w	r2, r2, r1
 8000764:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	bfad      	iteet	ge
 800076a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076e:	f000 000f 	andlt.w	r0, r0, #15
 8000772:	4b06      	ldrlt	r3, [pc, #24]	; (800078c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	bfb5      	itete	lt
 800077a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000780:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	e000ed14 	.word	0xe000ed14

08000790 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000790:	2800      	cmp	r0, #0
 8000792:	db08      	blt.n	80007a6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000794:	0942      	lsrs	r2, r0, #5
 8000796:	2301      	movs	r3, #1
 8000798:	f000 001f 	and.w	r0, r0, #31
 800079c:	fa03 f000 	lsl.w	r0, r3, r0
 80007a0:	4b01      	ldr	r3, [pc, #4]	; (80007a8 <HAL_NVIC_EnableIRQ+0x18>)
 80007a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80007a6:	4770      	bx	lr
 80007a8:	e000e100 	.word	0xe000e100

080007ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ac:	3801      	subs	r0, #1
 80007ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007b2:	d20a      	bcs.n	80007ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b6:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ba:	21f0      	movs	r1, #240	; 0xf0
 80007bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000e010 	.word	0xe000e010
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007d8:	4770      	bx	lr

080007da <HAL_SYSTICK_IRQHandler>:
{
 80007da:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007dc:	f7ff fffc 	bl	80007d8 <HAL_SYSTICK_Callback>
 80007e0:	bd08      	pop	{r3, pc}
	...

080007e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ea:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800099c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007f0:	4a68      	ldr	r2, [pc, #416]	; (8000994 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80009a0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007f6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80007fa:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007fc:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80007fe:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000800:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000802:	42ac      	cmp	r4, r5
 8000804:	f040 80b0 	bne.w	8000968 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000808:	684c      	ldr	r4, [r1, #4]
 800080a:	f024 0c10 	bic.w	ip, r4, #16
 800080e:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000812:	2e01      	cmp	r6, #1
 8000814:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000818:	d812      	bhi.n	8000840 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800081a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800081c:	2603      	movs	r6, #3
 800081e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000822:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000826:	68ce      	ldr	r6, [r1, #12]
 8000828:	fa06 f60e 	lsl.w	r6, r6, lr
 800082c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800082e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000830:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000832:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000836:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800083a:	409e      	lsls	r6, r3
 800083c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800083e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000840:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000842:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000844:	fa06 f60e 	lsl.w	r6, r6, lr
 8000848:	43f6      	mvns	r6, r6
 800084a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800084e:	688f      	ldr	r7, [r1, #8]
 8000850:	fa07 f70e 	lsl.w	r7, r7, lr
 8000854:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000858:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800085c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085e:	d116      	bne.n	800088e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000860:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000864:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000868:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800086c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000870:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000874:	f04f 0c0f 	mov.w	ip, #15
 8000878:	fa0c fc0b 	lsl.w	ip, ip, fp
 800087c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000880:	690f      	ldr	r7, [r1, #16]
 8000882:	fa07 f70b 	lsl.w	r7, r7, fp
 8000886:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800088a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800088e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000890:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000892:	f004 0703 	and.w	r7, r4, #3
 8000896:	fa07 fe0e 	lsl.w	lr, r7, lr
 800089a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800089e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008a0:	00e6      	lsls	r6, r4, #3
 80008a2:	d561      	bpl.n	8000968 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a4:	f04f 0b00 	mov.w	fp, #0
 80008a8:	f8cd b00c 	str.w	fp, [sp, #12]
 80008ac:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008b0:	4e39      	ldr	r6, [pc, #228]	; (8000998 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80008b6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80008ba:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80008be:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80008c2:	9703      	str	r7, [sp, #12]
 80008c4:	9f03      	ldr	r7, [sp, #12]
 80008c6:	f023 0703 	bic.w	r7, r3, #3
 80008ca:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80008ce:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008d2:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80008d6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008da:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80008de:	f04f 0e0f 	mov.w	lr, #15
 80008e2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008e6:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008e8:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ec:	d043      	beq.n	8000976 <HAL_GPIO_Init+0x192>
 80008ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008f2:	42b0      	cmp	r0, r6
 80008f4:	d041      	beq.n	800097a <HAL_GPIO_Init+0x196>
 80008f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008fa:	42b0      	cmp	r0, r6
 80008fc:	d03f      	beq.n	800097e <HAL_GPIO_Init+0x19a>
 80008fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000902:	42b0      	cmp	r0, r6
 8000904:	d03d      	beq.n	8000982 <HAL_GPIO_Init+0x19e>
 8000906:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800090a:	42b0      	cmp	r0, r6
 800090c:	d03b      	beq.n	8000986 <HAL_GPIO_Init+0x1a2>
 800090e:	4548      	cmp	r0, r9
 8000910:	d03b      	beq.n	800098a <HAL_GPIO_Init+0x1a6>
 8000912:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000916:	42b0      	cmp	r0, r6
 8000918:	d039      	beq.n	800098e <HAL_GPIO_Init+0x1aa>
 800091a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800091e:	42b0      	cmp	r0, r6
 8000920:	bf14      	ite	ne
 8000922:	2608      	movne	r6, #8
 8000924:	2607      	moveq	r6, #7
 8000926:	fa06 f60c 	lsl.w	r6, r6, ip
 800092a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800092e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000930:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000932:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000934:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000938:	bf0c      	ite	eq
 800093a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800093c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800093e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000940:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000942:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000946:	bf0c      	ite	eq
 8000948:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800094a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800094c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800094e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000950:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000954:	bf0c      	ite	eq
 8000956:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000958:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800095a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800095c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800095e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000960:	bf54      	ite	pl
 8000962:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000964:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000966:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000968:	3301      	adds	r3, #1
 800096a:	2b10      	cmp	r3, #16
 800096c:	f47f af45 	bne.w	80007fa <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000970:	b005      	add	sp, #20
 8000972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000976:	465e      	mov	r6, fp
 8000978:	e7d5      	b.n	8000926 <HAL_GPIO_Init+0x142>
 800097a:	2601      	movs	r6, #1
 800097c:	e7d3      	b.n	8000926 <HAL_GPIO_Init+0x142>
 800097e:	2602      	movs	r6, #2
 8000980:	e7d1      	b.n	8000926 <HAL_GPIO_Init+0x142>
 8000982:	2603      	movs	r6, #3
 8000984:	e7cf      	b.n	8000926 <HAL_GPIO_Init+0x142>
 8000986:	2604      	movs	r6, #4
 8000988:	e7cd      	b.n	8000926 <HAL_GPIO_Init+0x142>
 800098a:	2605      	movs	r6, #5
 800098c:	e7cb      	b.n	8000926 <HAL_GPIO_Init+0x142>
 800098e:	2606      	movs	r6, #6
 8000990:	e7c9      	b.n	8000926 <HAL_GPIO_Init+0x142>
 8000992:	bf00      	nop
 8000994:	40013c00 	.word	0x40013c00
 8000998:	40020000 	.word	0x40020000
 800099c:	40023800 	.word	0x40023800
 80009a0:	40021400 	.word	0x40021400

080009a4 <SysTick_Handler>:
#include "main.h"

extern ADC_HandleTypeDef adc1_Handler;

void SysTick_Handler(void)
{
 80009a4:	b508      	push	{r3, lr}
	HAL_IncTick();
 80009a6:	f7ff fc4d 	bl	8000244 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
}
 80009aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SYSTICK_IRQHandler();
 80009ae:	f7ff bf14 	b.w	80007da <HAL_SYSTICK_IRQHandler>
	...

080009b4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
	HAL_ADC_IRQHandler(&adc1_Handler);
 80009b4:	4801      	ldr	r0, [pc, #4]	; (80009bc <ADC_IRQHandler+0x8>)
 80009b6:	f7ff bd78 	b.w	80004aa <HAL_ADC_IRQHandler>
 80009ba:	bf00      	nop
 80009bc:	2000002c 	.word	0x2000002c

080009c0 <ADC1_Init>:


}

void ADC1_Init(void)//High Level Initialization
{
 80009c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}





	adc1_Handler.Instance =ADC1;
 80009c2:	4c0e      	ldr	r4, [pc, #56]	; (80009fc <ADC1_Init+0x3c>)
	adc1_Handler.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <ADC1_Init+0x40>)
 80009c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	adc1_Handler.Init.ContinuousConvMode = ENABLE;
 80009ca:	2501      	movs	r5, #1
	adc1_Handler.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009cc:	e884 000c 	stmia.w	r4, {r2, r3}
	adc1_Handler.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d0:	2600      	movs	r6, #0
	adc1_Handler.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	adc1_Handler.Init.NbrOfConversion = 1;
	adc1_Handler.Init.Resolution = ADC_RESOLUTION_8B;
 80009d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	HAL_ADC_Init(&adc1_Handler);
 80009d6:	4620      	mov	r0, r4
	adc1_Handler.Init.Resolution = ADC_RESOLUTION_8B;
 80009d8:	60a3      	str	r3, [r4, #8]
	adc1_Handler.Init.ContinuousConvMode = ENABLE;
 80009da:	7625      	strb	r5, [r4, #24]
	adc1_Handler.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009dc:	60e6      	str	r6, [r4, #12]
	adc1_Handler.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009de:	6165      	str	r5, [r4, #20]
	adc1_Handler.Init.NbrOfConversion = 1;
 80009e0:	61e5      	str	r5, [r4, #28]
	HAL_ADC_Init(&adc1_Handler);
 80009e2:	f7ff fc3b 	bl	800025c <HAL_ADC_Init>


	ADC_ChannelConfTypeDef adc1_channel0_cfg;
	adc1_channel0_cfg.Channel = ADC_CHANNEL_0;
	adc1_channel0_cfg.Rank = 1;
	adc1_channel0_cfg.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80009e6:	2303      	movs	r3, #3
	HAL_ADC_ConfigChannel(&adc1_Handler,&adc1_channel0_cfg);
 80009e8:	4669      	mov	r1, sp
 80009ea:	4620      	mov	r0, r4
	adc1_channel0_cfg.Channel = ADC_CHANNEL_0;
 80009ec:	9600      	str	r6, [sp, #0]
	adc1_channel0_cfg.Rank = 1;
 80009ee:	9501      	str	r5, [sp, #4]
	adc1_channel0_cfg.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80009f0:	9302      	str	r3, [sp, #8]
	HAL_ADC_ConfigChannel(&adc1_Handler,&adc1_channel0_cfg);
 80009f2:	f7ff fdef 	bl	80005d4 <HAL_ADC_ConfigChannel>


}
 80009f6:	b004      	add	sp, #16
 80009f8:	bd70      	pop	{r4, r5, r6, pc}
 80009fa:	bf00      	nop
 80009fc:	2000002c 	.word	0x2000002c
 8000a00:	40012000 	.word	0x40012000

08000a04 <main>:
{
 8000a04:	b508      	push	{r3, lr}
HAL_Init();
 8000a06:	f7ff fc03 	bl	8000210 <HAL_Init>
ADC1_Init();
 8000a0a:	f7ff ffd9 	bl	80009c0 <ADC1_Init>
HAL_ADC_Start_IT(&adc1_Handler);
 8000a0e:	4802      	ldr	r0, [pc, #8]	; (8000a18 <main+0x14>)
 8000a10:	f7ff fcca 	bl	80003a8 <HAL_ADC_Start_IT>
 8000a14:	e7fe      	b.n	8000a14 <main+0x10>
 8000a16:	bf00      	nop
 8000a18:	2000002c 	.word	0x2000002c

08000a1c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a1c:	b510      	push	{r4, lr}
	adc_value = HAL_ADC_GetValue(&adc1_Handler);
 8000a1e:	4c05      	ldr	r4, [pc, #20]	; (8000a34 <HAL_ADC_ConvCpltCallback+0x18>)
 8000a20:	4620      	mov	r0, r4
 8000a22:	f7ff fd3d 	bl	80004a0 <HAL_ADC_GetValue>
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000a28:	8018      	strh	r0, [r3, #0]
	__HAL_ADC_CLEAR_FLAG(&adc1_Handler,ADC_FLAG_EOC);
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	f06f 0202 	mvn.w	r2, #2
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	bd10      	pop	{r4, pc}
 8000a34:	2000002c 	.word	0x2000002c
 8000a38:	20000074 	.word	0x20000074

08000a3c <HAL_MspInit>:



#include "main.h"
void HAL_MspInit(void)
{
 8000a3c:	b508      	push	{r3, lr}
	//1- set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f7ff fe60 	bl	8000704 <HAL_NVIC_SetPriorityGrouping>
	//2-enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 7<<16; //usage fault, memory fault and bus fault system exception
 8000a44:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <HAL_MspInit+0x3c>)
 8000a46:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000a48:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000a4c:	6253      	str	r3, [r2, #36]	; 0x24
	//3-set the priority of the exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);//Both sub and first priority is highest
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4611      	mov	r1, r2
 8000a52:	f06f 000b 	mvn.w	r0, #11
 8000a56:	f7ff fe67 	bl	8000728 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);//Both sub and first priority is highest
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	f06f 000a 	mvn.w	r0, #10
 8000a62:	f7ff fe61 	bl	8000728 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);//Both sub and first priority is highes
 8000a66:	2200      	movs	r2, #0
 8000a68:	4611      	mov	r1, r2
 8000a6a:	f06f 0009 	mvn.w	r0, #9
}
 8000a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);//Both sub and first priority is highes
 8000a72:	f7ff be59 	b.w	8000728 <HAL_NVIC_SetPriority>
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <HAL_ADC_MspInit>:


void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a7c:	b510      	push	{r4, lr}
 8000a7e:	b088      	sub	sp, #32
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_ADC_MspInit+0x58>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
	GPIO_InitTypeDef gpio_adc;
	gpio_adc.Mode = GPIO_MODE_ANALOG;
	gpio_adc.Pin = GPIO_PIN_0;
	gpio_adc.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(GPIOA,&gpio_adc);
 8000a82:	4815      	ldr	r0, [pc, #84]	; (8000ad8 <HAL_ADC_MspInit+0x5c>)
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000a84:	2400      	movs	r4, #0
 8000a86:	9401      	str	r4, [sp, #4]
 8000a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a8e:	645a      	str	r2, [r3, #68]	; 0x44
 8000a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a92:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000a96:	9201      	str	r2, [sp, #4]
 8000a98:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	9402      	str	r4, [sp, #8]
 8000a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a9e:	f042 0201 	orr.w	r2, r2, #1
 8000aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	9302      	str	r3, [sp, #8]
	gpio_adc.Pin = GPIO_PIN_0;
 8000aac:	2201      	movs	r2, #1
	HAL_GPIO_Init(GPIOA,&gpio_adc);
 8000aae:	a903      	add	r1, sp, #12
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	9b02      	ldr	r3, [sp, #8]
	gpio_adc.Pin = GPIO_PIN_0;
 8000ab2:	9203      	str	r2, [sp, #12]
	gpio_adc.Mode = GPIO_MODE_ANALOG;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	9304      	str	r3, [sp, #16]
	gpio_adc.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(GPIOA,&gpio_adc);
 8000aba:	f7ff fe93 	bl	80007e4 <HAL_GPIO_Init>


	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000abe:	2012      	movs	r0, #18
 8000ac0:	f7ff fe66 	bl	8000790 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC_IRQn,15,0);
 8000ac4:	4622      	mov	r2, r4
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	2012      	movs	r0, #18
 8000aca:	f7ff fe2d 	bl	8000728 <HAL_NVIC_SetPriority>

}
 8000ace:	b008      	add	sp, #32
 8000ad0:	bd10      	pop	{r4, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000

08000adc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <SystemInit+0x18>)
 8000ade:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000ae2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000afc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000afe:	e003      	b.n	8000b08 <LoopCopyDataInit>

08000b00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b06:	3104      	adds	r1, #4

08000b08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b08:	480b      	ldr	r0, [pc, #44]	; (8000b38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b10:	d3f6      	bcc.n	8000b00 <CopyDataInit>
  ldr  r2, =_sbss
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b14:	e002      	b.n	8000b1c <LoopFillZerobss>

08000b16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b18:	f842 3b04 	str.w	r3, [r2], #4

08000b1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b20:	d3f9      	bcc.n	8000b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b22:	f7ff ffdb 	bl	8000adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f000 f811 	bl	8000b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff ff6b 	bl	8000a04 <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b34:	08000bb4 	.word	0x08000bb4
  ldr  r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b3c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b40:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b44:	20000078 	.word	0x20000078

08000b48 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <BusFault_Handler>
	...

08000b4c <__libc_init_array>:
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	4e0d      	ldr	r6, [pc, #52]	; (8000b84 <__libc_init_array+0x38>)
 8000b50:	4c0d      	ldr	r4, [pc, #52]	; (8000b88 <__libc_init_array+0x3c>)
 8000b52:	1ba4      	subs	r4, r4, r6
 8000b54:	10a4      	asrs	r4, r4, #2
 8000b56:	2500      	movs	r5, #0
 8000b58:	42a5      	cmp	r5, r4
 8000b5a:	d109      	bne.n	8000b70 <__libc_init_array+0x24>
 8000b5c:	4e0b      	ldr	r6, [pc, #44]	; (8000b8c <__libc_init_array+0x40>)
 8000b5e:	4c0c      	ldr	r4, [pc, #48]	; (8000b90 <__libc_init_array+0x44>)
 8000b60:	f000 f818 	bl	8000b94 <_init>
 8000b64:	1ba4      	subs	r4, r4, r6
 8000b66:	10a4      	asrs	r4, r4, #2
 8000b68:	2500      	movs	r5, #0
 8000b6a:	42a5      	cmp	r5, r4
 8000b6c:	d105      	bne.n	8000b7a <__libc_init_array+0x2e>
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
 8000b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b74:	4798      	blx	r3
 8000b76:	3501      	adds	r5, #1
 8000b78:	e7ee      	b.n	8000b58 <__libc_init_array+0xc>
 8000b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b7e:	4798      	blx	r3
 8000b80:	3501      	adds	r5, #1
 8000b82:	e7f2      	b.n	8000b6a <__libc_init_array+0x1e>
 8000b84:	08000bac 	.word	0x08000bac
 8000b88:	08000bac 	.word	0x08000bac
 8000b8c:	08000bac 	.word	0x08000bac
 8000b90:	08000bb0 	.word	0x08000bb0

08000b94 <_init>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	bf00      	nop
 8000b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9a:	bc08      	pop	{r3}
 8000b9c:	469e      	mov	lr, r3
 8000b9e:	4770      	bx	lr

08000ba0 <_fini>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	bf00      	nop
 8000ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ba6:	bc08      	pop	{r3}
 8000ba8:	469e      	mov	lr, r3
 8000baa:	4770      	bx	lr
