
HAL_MANUEL_LIBRARY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c24  08000c24  00010c24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000c30  08000c30  00010c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c34  08000c34  00010c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000054  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000060  20000060  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005522  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000010da  00000000  00000000  0002555e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000152f  00000000  00000000  00026638  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000390  00000000  00000000  00027b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000400  00000000  00000000  00027ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001c2c  00000000  00000000  000282f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001ea8  00000000  00000000  00029f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002bdcc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000868  00000000  00000000  0002be48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000c0c 	.word	0x08000c0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000c0c 	.word	0x08000c0c

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 faae 	bl	8000740 <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 fa70 	bl	80006d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
{
 8000210:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000212:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <HAL_Init+0x30>)
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800021a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000222:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800022a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800022c:	2003      	movs	r0, #3
 800022e:	f000 fa41 	bl	80006b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000232:	2000      	movs	r0, #0
 8000234:	f7ff ffc8 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000238:	f000 fc3e 	bl	8000ab8 <HAL_MspInit>
}
 800023c:	2000      	movs	r0, #0
 800023e:	bd08      	pop	{r3, pc}
 8000240:	40023c00 	.word	0x40023c00

08000244 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <HAL_IncTick+0x10>)
 8000246:	4b04      	ldr	r3, [pc, #16]	; (8000258 <HAL_IncTick+0x14>)
 8000248:	6811      	ldr	r1, [r2, #0]
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	440b      	add	r3, r1
 800024e:	6013      	str	r3, [r2, #0]
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	2000002c 	.word	0x2000002c
 8000258:	20000000 	.word	0x20000000

0800025c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800025c:	4b01      	ldr	r3, [pc, #4]	; (8000264 <HAL_GetTick+0x8>)
 800025e:	6818      	ldr	r0, [r3, #0]
}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	2000002c 	.word	0x2000002c

08000268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000268:	b538      	push	{r3, r4, r5, lr}
 800026a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800026c:	f7ff fff6 	bl	800025c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000270:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000272:	bf1c      	itt	ne
 8000274:	4b05      	ldrne	r3, [pc, #20]	; (800028c <HAL_Delay+0x24>)
 8000276:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000278:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800027a:	bf18      	it	ne
 800027c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800027e:	f7ff ffed 	bl	800025c <HAL_GetTick>
 8000282:	1b40      	subs	r0, r0, r5
 8000284:	4284      	cmp	r4, r0
 8000286:	d8fa      	bhi.n	800027e <HAL_Delay+0x16>
  {
  }
}
 8000288:	bd38      	pop	{r3, r4, r5, pc}
 800028a:	bf00      	nop
 800028c:	20000000 	.word	0x20000000

08000290 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000290:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000292:	4604      	mov	r4, r0
 8000294:	2800      	cmp	r0, #0
 8000296:	d06e      	beq.n	8000376 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000298:	f890 3020 	ldrb.w	r3, [r0, #32]
 800029c:	b90b      	cbnz	r3, 80002a2 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800029e:	f000 fc2b 	bl	8000af8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80002a2:	6822      	ldr	r2, [r4, #0]
 80002a4:	6813      	ldr	r3, [r2, #0]
 80002a6:	f023 0302 	bic.w	r3, r3, #2
 80002aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002ac:	f7ff ffd6 	bl	800025c <HAL_GetTick>
 80002b0:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002b2:	6823      	ldr	r3, [r4, #0]
 80002b4:	685a      	ldr	r2, [r3, #4]
 80002b6:	0791      	lsls	r1, r2, #30
 80002b8:	d451      	bmi.n	800035e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	f042 0201 	orr.w	r2, r2, #1
 80002c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002c2:	f7ff ffcb 	bl	800025c <HAL_GetTick>
 80002c6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002c8:	6823      	ldr	r3, [r4, #0]
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	07d2      	lsls	r2, r2, #31
 80002ce:	d554      	bpl.n	800037a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80002d0:	7e22      	ldrb	r2, [r4, #24]
 80002d2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	bf0c      	ite	eq
 80002d8:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80002dc:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80002e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80002e2:	7e62      	ldrb	r2, [r4, #25]
 80002e4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	bf0c      	ite	eq
 80002ea:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002ee:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80002f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80002f4:	7ea2      	ldrb	r2, [r4, #26]
 80002f6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	bf0c      	ite	eq
 80002fc:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000300:	f022 0220 	bicne.w	r2, r2, #32
 8000304:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000306:	7ee2      	ldrb	r2, [r4, #27]
 8000308:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	bf0c      	ite	eq
 800030e:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000312:	f042 0210 	orrne.w	r2, r2, #16
 8000316:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000318:	7f22      	ldrb	r2, [r4, #28]
 800031a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	bf0c      	ite	eq
 8000320:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000324:	f022 0208 	bicne.w	r2, r2, #8
 8000328:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800032a:	7f62      	ldrb	r2, [r4, #29]
 800032c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	bf0c      	ite	eq
 8000332:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000336:	f022 0204 	bicne.w	r2, r2, #4
 800033a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800033c:	68e1      	ldr	r1, [r4, #12]
 800033e:	68a2      	ldr	r2, [r4, #8]
 8000340:	430a      	orrs	r2, r1
 8000342:	6921      	ldr	r1, [r4, #16]
 8000344:	430a      	orrs	r2, r1
 8000346:	6961      	ldr	r1, [r4, #20]
 8000348:	430a      	orrs	r2, r1
 800034a:	6861      	ldr	r1, [r4, #4]
 800034c:	3901      	subs	r1, #1
 800034e:	430a      	orrs	r2, r1
 8000350:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000352:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000354:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000356:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000358:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 800035c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800035e:	f7ff ff7d 	bl	800025c <HAL_GetTick>
 8000362:	1b40      	subs	r0, r0, r5
 8000364:	280a      	cmp	r0, #10
 8000366:	d9a4      	bls.n	80002b2 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800036a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000370:	2305      	movs	r3, #5
 8000372:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000376:	2001      	movs	r0, #1
}
 8000378:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800037a:	f7ff ff6f 	bl	800025c <HAL_GetTick>
 800037e:	1b40      	subs	r0, r0, r5
 8000380:	280a      	cmp	r0, #10
 8000382:	d9a1      	bls.n	80002c8 <HAL_CAN_Init+0x38>
 8000384:	e7f0      	b.n	8000368 <HAL_CAN_Init+0xd8>
	...

08000388 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000388:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800038c:	3b01      	subs	r3, #1
 800038e:	2b01      	cmp	r3, #1
{
 8000390:	b530      	push	{r4, r5, lr}
  if ((state == HAL_CAN_STATE_READY) ||
 8000392:	d879      	bhi.n	8000488 <HAL_CAN_ConfigFilter+0x100>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000394:	4b3f      	ldr	r3, [pc, #252]	; (8000494 <HAL_CAN_ConfigFilter+0x10c>)
 8000396:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800039a:	f042 0201 	orr.w	r2, r2, #1
 800039e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80003a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80003a6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80003aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80003ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80003b2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80003b4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80003b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80003bc:	6948      	ldr	r0, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80003be:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80003c2:	f000 021f 	and.w	r2, r0, #31
 80003c6:	2401      	movs	r4, #1
 80003c8:	4094      	lsls	r4, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80003ca:	43e2      	mvns	r2, r4
 80003cc:	4015      	ands	r5, r2
 80003ce:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80003d2:	69cd      	ldr	r5, [r1, #28]
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d136      	bne.n	8000446 <HAL_CAN_ConfigFilter+0xbe>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80003d8:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80003dc:	4015      	ands	r5, r2
 80003de:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 80003e2:	00c0      	lsls	r0, r0, #3

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80003e4:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80003e6:	888b      	ldrh	r3, [r1, #4]
 80003e8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80003ec:	f500 40c8 	add.w	r0, r0, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80003f0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003f4:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003f8:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80003fa:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003fc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000400:	f8c0 3244 	str.w	r3, [r0, #580]	; 0x244
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000404:	6988      	ldr	r0, [r1, #24]
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <HAL_CAN_ConfigFilter+0x10c>)
 8000408:	2800      	cmp	r0, #0
 800040a:	d135      	bne.n	8000478 <HAL_CAN_ConfigFilter+0xf0>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800040c:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000410:	4010      	ands	r0, r2
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000412:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000416:	6908      	ldr	r0, [r1, #16]
 8000418:	bb90      	cbnz	r0, 8000480 <HAL_CAN_ConfigFilter+0xf8>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800041a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800041e:	4002      	ands	r2, r0
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000420:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000424:	6a0b      	ldr	r3, [r1, #32]
 8000426:	4a1b      	ldr	r2, [pc, #108]	; (8000494 <HAL_CAN_ConfigFilter+0x10c>)
 8000428:	2b01      	cmp	r3, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800042a:	bf02      	ittt	eq
 800042c:	f8d2 321c 	ldreq.w	r3, [r2, #540]	; 0x21c
 8000430:	4323      	orreq	r3, r4
 8000432:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000436:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800043a:	f023 0301 	bic.w	r3, r3, #1
 800043e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000442:	2000      	movs	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000446:	2d01      	cmp	r5, #1
 8000448:	d1dc      	bne.n	8000404 <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800044a:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 800044e:	4325      	orrs	r5, r4
 8000450:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000454:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000456:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000458:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800045c:	00c3      	lsls	r3, r0, #3
 800045e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000462:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000466:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000468:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800046c:	688d      	ldr	r5, [r1, #8]
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000472:	f8c3 0244 	str.w	r0, [r3, #580]	; 0x244
 8000476:	e7c5      	b.n	8000404 <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000478:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800047c:	4320      	orrs	r0, r4
 800047e:	e7c8      	b.n	8000412 <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000480:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000484:	4322      	orrs	r2, r4
 8000486:	e7cb      	b.n	8000420 <HAL_CAN_ConfigFilter+0x98>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000488:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800048a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800048e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000490:	2001      	movs	r0, #1
  }
}
 8000492:	bd30      	pop	{r4, r5, pc}
 8000494:	40006400 	.word	0x40006400

08000498 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000498:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800049a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800049e:	2b01      	cmp	r3, #1
{
 80004a0:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80004a2:	d11f      	bne.n	80004e4 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80004a4:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80004a6:	2302      	movs	r3, #2
 80004a8:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80004ac:	6813      	ldr	r3, [r2, #0]
 80004ae:	f023 0301 	bic.w	r3, r3, #1
 80004b2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80004b4:	f7ff fed2 	bl	800025c <HAL_GetTick>
 80004b8:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80004ba:	6823      	ldr	r3, [r4, #0]
 80004bc:	6858      	ldr	r0, [r3, #4]
 80004be:	f010 0001 	ands.w	r0, r0, #1
 80004c2:	d101      	bne.n	80004c8 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004c4:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80004c6:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80004c8:	f7ff fec8 	bl	800025c <HAL_GetTick>
 80004cc:	1b40      	subs	r0, r0, r5
 80004ce:	280a      	cmp	r0, #10
 80004d0:	d9f3      	bls.n	80004ba <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80004d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80004d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d8:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80004da:	2305      	movs	r3, #5
 80004dc:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 80004e0:	2001      	movs	r0, #1
  }
}
 80004e2:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80004e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ea:	6243      	str	r3, [r0, #36]	; 0x24
 80004ec:	e7f8      	b.n	80004e0 <HAL_CAN_Start+0x48>

080004ee <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80004ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80004f0:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80004f4:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80004f6:	3d01      	subs	r5, #1
 80004f8:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80004fa:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80004fc:	d840      	bhi.n	8000580 <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80004fe:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000502:	d039      	beq.n	8000578 <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000504:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000508:	2c03      	cmp	r4, #3
 800050a:	f04f 0501 	mov.w	r5, #1
 800050e:	d105      	bne.n	800051c <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000510:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000512:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000516:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000518:	2001      	movs	r0, #1
  }
}
 800051a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800051c:	40a5      	lsls	r5, r4
 800051e:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000520:	6888      	ldr	r0, [r1, #8]
 8000522:	68cf      	ldr	r7, [r1, #12]
 8000524:	f104 0318 	add.w	r3, r4, #24
 8000528:	bb08      	cbnz	r0, 800056e <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800052a:	6808      	ldr	r0, [r1, #0]
 800052c:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000530:	011b      	lsls	r3, r3, #4
 8000532:	0124      	lsls	r4, r4, #4
 8000534:	50f0      	str	r0, [r6, r3]
 8000536:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000538:	6908      	ldr	r0, [r1, #16]
      if (pHeader->TransmitGlobalTime == ENABLE)
 800053a:	7d09      	ldrb	r1, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800053c:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000540:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000542:	bf02      	ittt	eq
 8000544:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000548:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800054c:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000550:	4434      	add	r4, r6
 8000552:	6851      	ldr	r1, [r2, #4]
 8000554:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000558:	6812      	ldr	r2, [r2, #0]
 800055a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800055e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000562:	f042 0201 	orr.w	r2, r2, #1
 8000566:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 800056a:	2000      	movs	r0, #0
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800056e:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000570:	4338      	orrs	r0, r7
 8000572:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000576:	e7db      	b.n	8000530 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000578:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800057a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800057e:	e7ca      	b.n	8000516 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000580:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000586:	e7c6      	b.n	8000516 <HAL_CAN_AddTxMessage+0x28>

08000588 <HAL_CAN_IsTxMessagePending>:
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  uint32_t status = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000588:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800058c:	3b01      	subs	r3, #1
 800058e:	2b01      	cmp	r3, #1
 8000590:	d808      	bhi.n	80005a4 <HAL_CAN_IsTxMessagePending+0x1c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000592:	6803      	ldr	r3, [r0, #0]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	0689      	lsls	r1, r1, #26
 8000598:	ea31 0303 	bics.w	r3, r1, r3
 800059c:	bf14      	ite	ne
 800059e:	2001      	movne	r0, #1
 80005a0:	2000      	moveq	r0, #0
 80005a2:	4770      	bx	lr
 80005a4:	2000      	movs	r0, #0
    }
  }

  /* Return status */
  return status;
}
 80005a6:	4770      	bx	lr

080005a8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80005a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80005aa:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80005ae:	3c01      	subs	r4, #1
 80005b0:	2c01      	cmp	r4, #1
 80005b2:	d86b      	bhi.n	800068c <HAL_CAN_GetRxMessage+0xe4>
 80005b4:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80005b6:	b941      	cbnz	r1, 80005ca <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80005b8:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80005ba:	07a4      	lsls	r4, r4, #30
 80005bc:	d107      	bne.n	80005ce <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80005be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005c4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80005c6:	2001      	movs	r0, #1
  }
}
 80005c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80005ca:	6934      	ldr	r4, [r6, #16]
 80005cc:	e7f5      	b.n	80005ba <HAL_CAN_GetRxMessage+0x12>
 80005ce:	010c      	lsls	r4, r1, #4
 80005d0:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80005d2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80005d6:	f007 0704 	and.w	r7, r7, #4
 80005da:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80005dc:	2f00      	cmp	r7, #0
 80005de:	d14b      	bne.n	8000678 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80005e0:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80005e4:	0d7f      	lsrs	r7, r7, #21
 80005e6:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80005e8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80005ec:	f007 0702 	and.w	r7, r7, #2
 80005f0:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80005f2:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 80005f6:	f007 070f 	and.w	r7, r7, #15
 80005fa:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80005fc:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000600:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000604:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000606:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800060a:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800060c:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800060e:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000610:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000614:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000616:	6802      	ldr	r2, [r0, #0]
 8000618:	4422      	add	r2, r4
 800061a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800061e:	0a12      	lsrs	r2, r2, #8
 8000620:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000622:	6802      	ldr	r2, [r0, #0]
 8000624:	4422      	add	r2, r4
 8000626:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800062a:	0c12      	lsrs	r2, r2, #16
 800062c:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800062e:	6802      	ldr	r2, [r0, #0]
 8000630:	4422      	add	r2, r4
 8000632:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000636:	0e12      	lsrs	r2, r2, #24
 8000638:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800063a:	6802      	ldr	r2, [r0, #0]
 800063c:	4422      	add	r2, r4
 800063e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000642:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000644:	6802      	ldr	r2, [r0, #0]
 8000646:	4422      	add	r2, r4
 8000648:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800064c:	0a12      	lsrs	r2, r2, #8
 800064e:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000650:	6802      	ldr	r2, [r0, #0]
 8000652:	4422      	add	r2, r4
 8000654:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000658:	0c12      	lsrs	r2, r2, #16
 800065a:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800065c:	6802      	ldr	r2, [r0, #0]
 800065e:	4414      	add	r4, r2
 8000660:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000664:	0e12      	lsrs	r2, r2, #24
 8000666:	71da      	strb	r2, [r3, #7]
 8000668:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800066a:	b951      	cbnz	r1, 8000682 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800066c:	68da      	ldr	r2, [r3, #12]
 800066e:	f042 0220 	orr.w	r2, r2, #32
 8000672:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000674:	2000      	movs	r0, #0
 8000676:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000678:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800067c:	08ff      	lsrs	r7, r7, #3
 800067e:	6057      	str	r7, [r2, #4]
 8000680:	e7b2      	b.n	80005e8 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000682:	691a      	ldr	r2, [r3, #16]
 8000684:	f042 0220 	orr.w	r2, r2, #32
 8000688:	611a      	str	r2, [r3, #16]
 800068a:	e7f3      	b.n	8000674 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800068c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800068e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000692:	e797      	b.n	80005c4 <HAL_CAN_GetRxMessage+0x1c>

08000694 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000694:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000698:	3b01      	subs	r3, #1
 800069a:	2b01      	cmp	r3, #1
 800069c:	d807      	bhi.n	80006ae <HAL_CAN_GetRxFifoFillLevel+0x1a>
 800069e:	6803      	ldr	r3, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80006a0:	b919      	cbnz	r1, 80006aa <HAL_CAN_GetRxFifoFillLevel+0x16>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80006a2:	68d8      	ldr	r0, [r3, #12]
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80006a4:	f000 0003 	and.w	r0, r0, #3
 80006a8:	4770      	bx	lr
 80006aa:	6918      	ldr	r0, [r3, #16]
 80006ac:	e7fa      	b.n	80006a4 <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 80006ae:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 80006b0:	4770      	bx	lr
	...

080006b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006bc:	041b      	lsls	r3, r3, #16
 80006be:	0c1b      	lsrs	r3, r3, #16
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	0200      	lsls	r0, r0, #8
 80006c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80006ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006d0:	60d3      	str	r3, [r2, #12]
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	68dc      	ldr	r4, [r3, #12]
 80006de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	bf28      	it	cs
 80006ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	f04f 0501 	mov.w	r5, #1
 80006f4:	fa05 f303 	lsl.w	r3, r5, r3
 80006f8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fc:	bf8c      	ite	hi
 80006fe:	3c03      	subhi	r4, #3
 8000700:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000702:	4019      	ands	r1, r3
 8000704:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000706:	fa05 f404 	lsl.w	r4, r5, r4
 800070a:	3c01      	subs	r4, #1
 800070c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800070e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	ea42 0201 	orr.w	r2, r2, r1
 8000714:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	bfad      	iteet	ge
 800071a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071e:	f000 000f 	andlt.w	r0, r0, #15
 8000722:	4b06      	ldrlt	r3, [pc, #24]	; (800073c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	bfb5      	itete	lt
 800072a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000734:	bd30      	pop	{r4, r5, pc}
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	e000ed14 	.word	0xe000ed14

08000740 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	3801      	subs	r0, #1
 8000742:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000746:	d20a      	bcs.n	800075e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074a:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	21f0      	movs	r1, #240	; 0xf0
 8000750:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000e010 	.word	0xe000e010
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800076c:	4770      	bx	lr

0800076e <HAL_SYSTICK_IRQHandler>:
{
 800076e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000770:	f7ff fffc 	bl	800076c <HAL_SYSTICK_Callback>
 8000774:	bd08      	pop	{r3, pc}
	...

08000778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800077c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800077e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000780:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000930 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000784:	4a68      	ldr	r2, [pc, #416]	; (8000928 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000786:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000934 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800078a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800078c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800078e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000790:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000792:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000794:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000796:	42ac      	cmp	r4, r5
 8000798:	f040 80b0 	bne.w	80008fc <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800079c:	684c      	ldr	r4, [r1, #4]
 800079e:	f024 0c10 	bic.w	ip, r4, #16
 80007a2:	f10c 36ff 	add.w	r6, ip, #4294967295
 80007a6:	2e01      	cmp	r6, #1
 80007a8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80007ac:	d812      	bhi.n	80007d4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80007ae:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007b0:	2603      	movs	r6, #3
 80007b2:	fa06 f60e 	lsl.w	r6, r6, lr
 80007b6:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ba:	68ce      	ldr	r6, [r1, #12]
 80007bc:	fa06 f60e 	lsl.w	r6, r6, lr
 80007c0:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80007c2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80007c4:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007c6:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ca:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007ce:	409e      	lsls	r6, r3
 80007d0:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80007d2:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007d4:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80007d6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007d8:	fa06 f60e 	lsl.w	r6, r6, lr
 80007dc:	43f6      	mvns	r6, r6
 80007de:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007e2:	688f      	ldr	r7, [r1, #8]
 80007e4:	fa07 f70e 	lsl.w	r7, r7, lr
 80007e8:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ec:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80007f0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f2:	d116      	bne.n	8000822 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80007f4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007f8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007fc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000800:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000804:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000808:	f04f 0c0f 	mov.w	ip, #15
 800080c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000810:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000814:	690f      	ldr	r7, [r1, #16]
 8000816:	fa07 f70b 	lsl.w	r7, r7, fp
 800081a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800081e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000822:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000824:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000826:	f004 0703 	and.w	r7, r4, #3
 800082a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800082e:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000832:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000834:	00e6      	lsls	r6, r4, #3
 8000836:	d561      	bpl.n	80008fc <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000838:	f04f 0b00 	mov.w	fp, #0
 800083c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000840:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000844:	4e39      	ldr	r6, [pc, #228]	; (800092c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800084a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800084e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000852:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000856:	9703      	str	r7, [sp, #12]
 8000858:	9f03      	ldr	r7, [sp, #12]
 800085a:	f023 0703 	bic.w	r7, r3, #3
 800085e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000862:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000866:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800086a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800086e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000872:	f04f 0e0f 	mov.w	lr, #15
 8000876:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800087a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800087c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000880:	d043      	beq.n	800090a <HAL_GPIO_Init+0x192>
 8000882:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000886:	42b0      	cmp	r0, r6
 8000888:	d041      	beq.n	800090e <HAL_GPIO_Init+0x196>
 800088a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800088e:	42b0      	cmp	r0, r6
 8000890:	d03f      	beq.n	8000912 <HAL_GPIO_Init+0x19a>
 8000892:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000896:	42b0      	cmp	r0, r6
 8000898:	d03d      	beq.n	8000916 <HAL_GPIO_Init+0x19e>
 800089a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800089e:	42b0      	cmp	r0, r6
 80008a0:	d03b      	beq.n	800091a <HAL_GPIO_Init+0x1a2>
 80008a2:	4548      	cmp	r0, r9
 80008a4:	d03b      	beq.n	800091e <HAL_GPIO_Init+0x1a6>
 80008a6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80008aa:	42b0      	cmp	r0, r6
 80008ac:	d039      	beq.n	8000922 <HAL_GPIO_Init+0x1aa>
 80008ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008b2:	42b0      	cmp	r0, r6
 80008b4:	bf14      	ite	ne
 80008b6:	2608      	movne	r6, #8
 80008b8:	2607      	moveq	r6, #7
 80008ba:	fa06 f60c 	lsl.w	r6, r6, ip
 80008be:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008c2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80008c4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80008c6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008c8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008cc:	bf0c      	ite	eq
 80008ce:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008d0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80008d2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80008d4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008d6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008da:	bf0c      	ite	eq
 80008dc:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008de:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80008e0:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008e2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008e4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008e8:	bf0c      	ite	eq
 80008ea:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008ec:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80008ee:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80008f0:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008f2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008f4:	bf54      	ite	pl
 80008f6:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80008f8:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80008fa:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008fc:	3301      	adds	r3, #1
 80008fe:	2b10      	cmp	r3, #16
 8000900:	f47f af45 	bne.w	800078e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000904:	b005      	add	sp, #20
 8000906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800090a:	465e      	mov	r6, fp
 800090c:	e7d5      	b.n	80008ba <HAL_GPIO_Init+0x142>
 800090e:	2601      	movs	r6, #1
 8000910:	e7d3      	b.n	80008ba <HAL_GPIO_Init+0x142>
 8000912:	2602      	movs	r6, #2
 8000914:	e7d1      	b.n	80008ba <HAL_GPIO_Init+0x142>
 8000916:	2603      	movs	r6, #3
 8000918:	e7cf      	b.n	80008ba <HAL_GPIO_Init+0x142>
 800091a:	2604      	movs	r6, #4
 800091c:	e7cd      	b.n	80008ba <HAL_GPIO_Init+0x142>
 800091e:	2605      	movs	r6, #5
 8000920:	e7cb      	b.n	80008ba <HAL_GPIO_Init+0x142>
 8000922:	2606      	movs	r6, #6
 8000924:	e7c9      	b.n	80008ba <HAL_GPIO_Init+0x142>
 8000926:	bf00      	nop
 8000928:	40013c00 	.word	0x40013c00
 800092c:	40020000 	.word	0x40020000
 8000930:	40023800 	.word	0x40023800
 8000934:	40021400 	.word	0x40021400

08000938 <SysTick_Handler>:
#include "main.h"

extern ADC_HandleTypeDef adc1_Handler;

void SysTick_Handler(void)
{
 8000938:	b508      	push	{r3, lr}
	HAL_IncTick();
 800093a:	f7ff fc83 	bl	8000244 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
}
 800093e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SYSTICK_IRQHandler();
 8000942:	f7ff bf14 	b.w	800076e <HAL_SYSTICK_IRQHandler>
	...

08000948 <CAN1_Init>:

}

void CAN1_Init(void)
{
	can_handler.Instance = CAN1;
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <CAN1_Init+0x30>)
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <CAN1_Init+0x34>)
 800094c:	6003      	str	r3, [r0, #0]
	can_handler.Init.Mode = CAN_MODE_LOOPBACK;
 800094e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000952:	6083      	str	r3, [r0, #8]
	can_handler.Init.AutoBusOff = DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	7643      	strb	r3, [r0, #25]
	can_handler.Init.AutoRetransmission = ENABLE;
	can_handler.Init.AutoWakeUp = DISABLE;
 8000958:	7683      	strb	r3, [r0, #26]
	can_handler.Init.ReceiveFifoLocked = DISABLE;
 800095a:	7703      	strb	r3, [r0, #28]
	can_handler.Init.TimeTriggeredMode = DISABLE;
 800095c:	7603      	strb	r3, [r0, #24]
	can_handler.Init.TransmitFifoPriority = DISABLE;
 800095e:	7743      	strb	r3, [r0, #29]
	can_handler.Init.Prescaler = 1;
	can_handler.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000960:	60c3      	str	r3, [r0, #12]

	can_handler.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000962:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
	can_handler.Init.AutoRetransmission = ENABLE;
 8000966:	2201      	movs	r2, #1
	can_handler.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000968:	6103      	str	r3, [r0, #16]
	can_handler.Init.TimeSeg2 = CAN_BS2_2TQ;
 800096a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	can_handler.Init.AutoRetransmission = ENABLE;
 800096e:	76c2      	strb	r2, [r0, #27]
	can_handler.Init.Prescaler = 1;
 8000970:	6042      	str	r2, [r0, #4]
	can_handler.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000972:	6143      	str	r3, [r0, #20]

	HAL_CAN_Init(&can_handler);
 8000974:	f7ff bc8c 	b.w	8000290 <HAL_CAN_Init>
 8000978:	20000030 	.word	0x20000030
 800097c:	40006400 	.word	0x40006400

08000980 <Can1_TX>:
}
uint32_t test_varib = 0;
void Can1_TX(uint8_t data[])
{
 8000980:	b530      	push	{r4, r5, lr}
 8000982:	b089      	sub	sp, #36	; 0x24
	uint8_t TxMailBox;
	CAN_TxHeaderTypeDef can_tx_handler;
	can_tx_handler.DLC = 8;
 8000984:	2308      	movs	r3, #8
 8000986:	9306      	str	r3, [sp, #24]
	can_tx_handler.StdId = 0x31D;
 8000988:	f240 331d 	movw	r3, #797	; 0x31d
 800098c:	9302      	str	r3, [sp, #8]
	can_tx_handler.IDE = CAN_ID_STD;
 800098e:	2300      	movs	r3, #0
 8000990:	9304      	str	r3, [sp, #16]
	can_tx_handler.RTR = CAN_RTR_DATA;
 8000992:	9305      	str	r3, [sp, #20]

	HAL_CAN_AddTxMessage(&can_handler,&can_tx_handler,data,&TxMailBox);
 8000994:	4602      	mov	r2, r0
 8000996:	f10d 0307 	add.w	r3, sp, #7
 800099a:	a902      	add	r1, sp, #8
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <Can1_TX+0x50>)

	while(HAL_CAN_IsTxMessagePending(&can_handler,TxMailBox));
 800099e:	4c0c      	ldr	r4, [pc, #48]	; (80009d0 <Can1_TX+0x50>)
	HAL_CAN_AddTxMessage(&can_handler,&can_tx_handler,data,&TxMailBox);
 80009a0:	f7ff fda5 	bl	80004ee <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&can_handler,TxMailBox));
 80009a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80009a8:	4620      	mov	r0, r4
 80009aa:	f7ff fded 	bl	8000588 <HAL_CAN_IsTxMessagePending>
 80009ae:	4605      	mov	r5, r0
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d1f7      	bne.n	80009a4 <Can1_TX+0x24>
	HAL_Delay(3000);
	test_varib = 1;
 80009b4:	4c07      	ldr	r4, [pc, #28]	; (80009d4 <Can1_TX+0x54>)
	HAL_Delay(3000);
 80009b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009ba:	f7ff fc55 	bl	8000268 <HAL_Delay>
	test_varib = 1;
 80009be:	2301      	movs	r3, #1
	HAL_Delay(3000);
 80009c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
	test_varib = 1;
 80009c4:	6023      	str	r3, [r4, #0]
	HAL_Delay(3000);
 80009c6:	f7ff fc4f 	bl	8000268 <HAL_Delay>
	test_varib = 0;
 80009ca:	6025      	str	r5, [r4, #0]
}
 80009cc:	b009      	add	sp, #36	; 0x24
 80009ce:	bd30      	pop	{r4, r5, pc}
 80009d0:	20000030 	.word	0x20000030
 80009d4:	20000028 	.word	0x20000028

080009d8 <CAN_Filtering>:

void CAN_Filtering()
{
 80009d8:	b500      	push	{lr}
 80009da:	b08b      	sub	sp, #44	; 0x2c
	//CAN_FilterRegister_TypeDef can_filtering;
	CAN_FilterTypeDef can_filtering;
	can_filtering.FilterIdHigh = 0x0000;
 80009dc:	2300      	movs	r3, #0
	can_filtering.FilterBank = 0;
	can_filtering.FilterFIFOAssignment = CAN_RX_FIFO0;

	can_filtering.FilterMaskIdHigh = 0x00;
	can_filtering.FilterMaskIdLow = 0x00;
	can_filtering.FilterScale = CAN_FILTERSCALE_32BIT;
 80009de:	2201      	movs	r2, #1
	can_filtering.FilterMode = CAN_FILTERMODE_IDMASK;
	can_filtering.FilterActivation = CAN_FILTER_ENABLE;
	HAL_CAN_ConfigFilter(&can_handler,&can_filtering);
 80009e0:	4669      	mov	r1, sp
 80009e2:	4807      	ldr	r0, [pc, #28]	; (8000a00 <CAN_Filtering+0x28>)
	can_filtering.FilterIdHigh = 0x0000;
 80009e4:	9300      	str	r3, [sp, #0]
	can_filtering.FilterIdLow = 0x0000;
 80009e6:	9301      	str	r3, [sp, #4]
	can_filtering.FilterBank = 0;
 80009e8:	9305      	str	r3, [sp, #20]
	can_filtering.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009ea:	9304      	str	r3, [sp, #16]
	can_filtering.FilterMaskIdHigh = 0x00;
 80009ec:	9302      	str	r3, [sp, #8]
	can_filtering.FilterMaskIdLow = 0x00;
 80009ee:	9303      	str	r3, [sp, #12]
	can_filtering.FilterScale = CAN_FILTERSCALE_32BIT;
 80009f0:	9207      	str	r2, [sp, #28]
	can_filtering.FilterMode = CAN_FILTERMODE_IDMASK;
 80009f2:	9306      	str	r3, [sp, #24]
	can_filtering.FilterActivation = CAN_FILTER_ENABLE;
 80009f4:	9208      	str	r2, [sp, #32]
	HAL_CAN_ConfigFilter(&can_handler,&can_filtering);
 80009f6:	f7ff fcc7 	bl	8000388 <HAL_CAN_ConfigFilter>
}
 80009fa:	b00b      	add	sp, #44	; 0x2c
 80009fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a00:	20000030 	.word	0x20000030

08000a04 <Can1_RX>:

uint8_t veri1,veri2,veri3,veri4,veri5,veri6,veri7,veri8;
void Can1_RX()
{
 8000a04:	b500      	push	{lr}
 8000a06:	b08b      	sub	sp, #44	; 0x2c
	CAN_RxHeaderTypeDef can_rx_handler;
	uint8_t rcvd_msg[8];


	while(!(HAL_CAN_GetRxFifoFillLevel(&can_handler,CAN_RX_FIFO0)));
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4817      	ldr	r0, [pc, #92]	; (8000a68 <Can1_RX+0x64>)
 8000a0c:	f7ff fe42 	bl	8000694 <HAL_CAN_GetRxFifoFillLevel>
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d0f9      	beq.n	8000a08 <Can1_RX+0x4>


	HAL_CAN_GetRxMessage(&can_handler,CAN_RX_FIFO0,&can_rx_handler,rcvd_msg);
 8000a14:	ab01      	add	r3, sp, #4
 8000a16:	aa03      	add	r2, sp, #12
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4813      	ldr	r0, [pc, #76]	; (8000a68 <Can1_RX+0x64>)
 8000a1c:	f7ff fdc4 	bl	80005a8 <HAL_CAN_GetRxMessage>

	veri1=rcvd_msg[0];
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <Can1_RX+0x68>)
 8000a22:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000a26:	701a      	strb	r2, [r3, #0]
	veri2=rcvd_msg[1];
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <Can1_RX+0x6c>)
 8000a2a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000a2e:	701a      	strb	r2, [r3, #0]
	veri3=rcvd_msg[2];
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <Can1_RX+0x70>)
 8000a32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000a36:	701a      	strb	r2, [r3, #0]
	veri4=rcvd_msg[3];
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <Can1_RX+0x74>)
 8000a3a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000a3e:	701a      	strb	r2, [r3, #0]
	veri5=rcvd_msg[4];
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <Can1_RX+0x78>)
 8000a42:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8000a46:	701a      	strb	r2, [r3, #0]
	veri6=rcvd_msg[5];
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <Can1_RX+0x7c>)
 8000a4a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8000a4e:	701a      	strb	r2, [r3, #0]
	veri7=rcvd_msg[6];
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <Can1_RX+0x80>)
 8000a52:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8000a56:	701a      	strb	r2, [r3, #0]
	veri8=rcvd_msg[7];
 8000a58:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <Can1_RX+0x84>)
 8000a5e:	701a      	strb	r2, [r3, #0]
}
 8000a60:	b00b      	add	sp, #44	; 0x2c
 8000a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a66:	bf00      	nop
 8000a68:	20000030 	.word	0x20000030
 8000a6c:	2000005f 	.word	0x2000005f
 8000a70:	2000005c 	.word	0x2000005c
 8000a74:	2000005b 	.word	0x2000005b
 8000a78:	2000005a 	.word	0x2000005a
 8000a7c:	20000059 	.word	0x20000059
 8000a80:	20000058 	.word	0x20000058
 8000a84:	2000005d 	.word	0x2000005d
 8000a88:	2000005e 	.word	0x2000005e

08000a8c <main>:
{
 8000a8c:	b508      	push	{r3, lr}
HAL_Init();
 8000a8e:	f7ff fbbf 	bl	8000210 <HAL_Init>
CAN1_Init();
 8000a92:	f7ff ff59 	bl	8000948 <CAN1_Init>
HAL_CAN_Start(&can_handler);
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <main+0x24>)
	Can1_TX("muhammet");
 8000a98:	4c06      	ldr	r4, [pc, #24]	; (8000ab4 <main+0x28>)
HAL_CAN_Start(&can_handler);
 8000a9a:	f7ff fcfd 	bl	8000498 <HAL_CAN_Start>
CAN_Filtering();
 8000a9e:	f7ff ff9b 	bl	80009d8 <CAN_Filtering>
	Can1_TX("muhammet");
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	f7ff ff6c 	bl	8000980 <Can1_TX>
	Can1_RX();
 8000aa8:	f7ff ffac 	bl	8000a04 <Can1_RX>
 8000aac:	e7f9      	b.n	8000aa2 <main+0x16>
 8000aae:	bf00      	nop
 8000ab0:	20000030 	.word	0x20000030
 8000ab4:	08000c24 	.word	0x08000c24

08000ab8 <HAL_MspInit>:
 *  Created on: 12 Eki 2022
 *      Author: muhammetkocak
 */
#include "main.h"
void HAL_MspInit(void)
{
 8000ab8:	b508      	push	{r3, lr}
	//1- set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aba:	2003      	movs	r0, #3
 8000abc:	f7ff fdfa 	bl	80006b4 <HAL_NVIC_SetPriorityGrouping>
	//2-enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 7<<16; //usage fault, memory fault and bus fault system exception
 8000ac0:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_MspInit+0x3c>)
 8000ac2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000ac4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000ac8:	6253      	str	r3, [r2, #36]	; 0x24
	//3-set the priority of the exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);//Both sub and first priority is highest
 8000aca:	2200      	movs	r2, #0
 8000acc:	4611      	mov	r1, r2
 8000ace:	f06f 000b 	mvn.w	r0, #11
 8000ad2:	f7ff fe01 	bl	80006d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);//Both sub and first priority is highest
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4611      	mov	r1, r2
 8000ada:	f06f 000a 	mvn.w	r0, #10
 8000ade:	f7ff fdfb 	bl	80006d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);//Both sub and first priority is highes
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	f06f 0009 	mvn.w	r0, #9
}
 8000aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);//Both sub and first priority is highes
 8000aee:	f7ff bdf3 	b.w	80006d8 <HAL_NVIC_SetPriority>
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000af8:	b500      	push	{lr}
 8000afa:	b089      	sub	sp, #36	; 0x24
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <HAL_CAN_MspInit+0x54>)
	gpio_can.Pin = GPIO_PIN_8 | GPIO_PIN_9;
	gpio_can.Mode = GPIO_MODE_AF_PP;
	gpio_can.Pull = GPIO_NOPULL;
	gpio_can.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	gpio_can.Alternate = GPIO_AF9_CAN1;
	HAL_GPIO_Init(GPIOB,&gpio_can);
 8000afe:	4814      	ldr	r0, [pc, #80]	; (8000b50 <HAL_CAN_MspInit+0x58>)
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000b00:	2200      	movs	r2, #0
 8000b02:	9201      	str	r2, [sp, #4]
 8000b04:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000b06:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000b0a:	6419      	str	r1, [r3, #64]	; 0x40
 8000b0c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000b0e:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
 8000b12:	9101      	str	r1, [sp, #4]
 8000b14:	9901      	ldr	r1, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	9202      	str	r2, [sp, #8]
 8000b18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b1a:	f041 0102 	orr.w	r1, r1, #2
 8000b1e:	6319      	str	r1, [r3, #48]	; 0x30
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	gpio_can.Pull = GPIO_NOPULL;
 8000b22:	9205      	str	r2, [sp, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	9302      	str	r3, [sp, #8]
 8000b2a:	9b02      	ldr	r3, [sp, #8]
	gpio_can.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000b2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b30:	9303      	str	r3, [sp, #12]
	gpio_can.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	9304      	str	r3, [sp, #16]
	gpio_can.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(GPIOB,&gpio_can);
 8000b3a:	a903      	add	r1, sp, #12
	gpio_can.Alternate = GPIO_AF9_CAN1;
 8000b3c:	2309      	movs	r3, #9
 8000b3e:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOB,&gpio_can);
 8000b40:	f7ff fe1a 	bl	8000778 <HAL_GPIO_Init>
}
 8000b44:	b009      	add	sp, #36	; 0x24
 8000b46:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020400 	.word	0x40020400

08000b54 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SystemInit+0x18>)
 8000b56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000b5a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b76:	e003      	b.n	8000b80 <LoopCopyDataInit>

08000b78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b7e:	3104      	adds	r1, #4

08000b80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b80:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b88:	d3f6      	bcc.n	8000b78 <CopyDataInit>
  ldr  r2, =_sbss
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b8c:	e002      	b.n	8000b94 <LoopFillZerobss>

08000b8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b90:	f842 3b04 	str.w	r3, [r2], #4

08000b94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b98:	d3f9      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b9a:	f7ff ffdb 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f000 f811 	bl	8000bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff ff73 	bl	8000a8c <main>
  bx  lr    
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ba8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bac:	08000c38 	.word	0x08000c38
  ldr  r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bb4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000bb8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000bbc:	20000060 	.word	0x20000060

08000bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <__libc_init_array>:
 8000bc4:	b570      	push	{r4, r5, r6, lr}
 8000bc6:	4e0d      	ldr	r6, [pc, #52]	; (8000bfc <__libc_init_array+0x38>)
 8000bc8:	4c0d      	ldr	r4, [pc, #52]	; (8000c00 <__libc_init_array+0x3c>)
 8000bca:	1ba4      	subs	r4, r4, r6
 8000bcc:	10a4      	asrs	r4, r4, #2
 8000bce:	2500      	movs	r5, #0
 8000bd0:	42a5      	cmp	r5, r4
 8000bd2:	d109      	bne.n	8000be8 <__libc_init_array+0x24>
 8000bd4:	4e0b      	ldr	r6, [pc, #44]	; (8000c04 <__libc_init_array+0x40>)
 8000bd6:	4c0c      	ldr	r4, [pc, #48]	; (8000c08 <__libc_init_array+0x44>)
 8000bd8:	f000 f818 	bl	8000c0c <_init>
 8000bdc:	1ba4      	subs	r4, r4, r6
 8000bde:	10a4      	asrs	r4, r4, #2
 8000be0:	2500      	movs	r5, #0
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	d105      	bne.n	8000bf2 <__libc_init_array+0x2e>
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
 8000be8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bec:	4798      	blx	r3
 8000bee:	3501      	adds	r5, #1
 8000bf0:	e7ee      	b.n	8000bd0 <__libc_init_array+0xc>
 8000bf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bf6:	4798      	blx	r3
 8000bf8:	3501      	adds	r5, #1
 8000bfa:	e7f2      	b.n	8000be2 <__libc_init_array+0x1e>
 8000bfc:	08000c30 	.word	0x08000c30
 8000c00:	08000c30 	.word	0x08000c30
 8000c04:	08000c30 	.word	0x08000c30
 8000c08:	08000c34 	.word	0x08000c34

08000c0c <_init>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	bf00      	nop
 8000c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c12:	bc08      	pop	{r3}
 8000c14:	469e      	mov	lr, r3
 8000c16:	4770      	bx	lr

08000c18 <_fini>:
 8000c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1a:	bf00      	nop
 8000c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1e:	bc08      	pop	{r3}
 8000c20:	469e      	mov	lr, r3
 8000c22:	4770      	bx	lr
