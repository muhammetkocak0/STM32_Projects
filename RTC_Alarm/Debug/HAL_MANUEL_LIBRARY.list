
HAL_MANUEL_LIBRARY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000163c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080017c4  080017c4  000117c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080017d4  080017d4  000117d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080017dc  080017dc  000117dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080017e0  080017e0  000117e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080017e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000048  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000054  20000054  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00007fce  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001673  00000000  00000000  0002800a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002481  00000000  00000000  0002967d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000560  00000000  00000000  0002bb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f8  00000000  00000000  0002c060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002ee5  00000000  00000000  0002c658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000025dc  00000000  00000000  0002f53d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00031b19  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000d94  00000000  00000000  00031b98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080017ac 	.word	0x080017ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080017ac 	.word	0x080017ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8aa 	bl	8000648 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f85e 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f82f 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f001 f884 	bl	8001654 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	68dc      	ldr	r4, [r3, #12]
 80005ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	bf28      	it	cs
 80005d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 0501 	mov.w	r5, #1
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	4019      	ands	r1, r3
 80005f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f2:	fa05 f404 	lsl.w	r4, r5, r4
 80005f6:	3c01      	subs	r4, #1
 80005f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfad      	iteet	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	andlt.w	r0, r0, #15
 800060e:	4b06      	ldrlt	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfb5      	itete	lt
 8000616:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800062c:	2800      	cmp	r0, #0
 800062e:	db08      	blt.n	8000642 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000630:	0942      	lsrs	r2, r0, #5
 8000632:	2301      	movs	r3, #1
 8000634:	f000 001f 	and.w	r0, r0, #31
 8000638:	fa03 f000 	lsl.w	r0, r3, r0
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <HAL_NVIC_EnableIRQ+0x18>)
 800063e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000642:	4770      	bx	lr
 8000644:	e000e100 	.word	0xe000e100

08000648 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	3801      	subs	r0, #1
 800064a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064e:	d20a      	bcs.n	8000666 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000654:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	21f0      	movs	r1, #240	; 0xf0
 8000658:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000666:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000e010 	.word	0xe000e010
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000674:	4770      	bx	lr

08000676 <HAL_SYSTICK_IRQHandler>:
{
 8000676:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000678:	f7ff fffc 	bl	8000674 <HAL_SYSTICK_Callback>
 800067c:	bd08      	pop	{r3, pc}
	...

08000680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000684:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000686:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000688:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000838 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800068c:	4a68      	ldr	r2, [pc, #416]	; (8000830 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800068e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800083c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000692:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000694:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000696:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000698:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800069a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800069e:	42ac      	cmp	r4, r5
 80006a0:	f040 80b0 	bne.w	8000804 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a4:	684c      	ldr	r4, [r1, #4]
 80006a6:	f024 0c10 	bic.w	ip, r4, #16
 80006aa:	f10c 36ff 	add.w	r6, ip, #4294967295
 80006ae:	2e01      	cmp	r6, #1
 80006b0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006b4:	d812      	bhi.n	80006dc <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006b6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006b8:	2603      	movs	r6, #3
 80006ba:	fa06 f60e 	lsl.w	r6, r6, lr
 80006be:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006c2:	68ce      	ldr	r6, [r1, #12]
 80006c4:	fa06 f60e 	lsl.w	r6, r6, lr
 80006c8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006ca:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006cc:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ce:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006d2:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006d6:	409e      	lsls	r6, r3
 80006d8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006da:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006dc:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006de:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006e0:	fa06 f60e 	lsl.w	r6, r6, lr
 80006e4:	43f6      	mvns	r6, r6
 80006e6:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006ea:	688f      	ldr	r7, [r1, #8]
 80006ec:	fa07 f70e 	lsl.w	r7, r7, lr
 80006f0:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006f4:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80006f8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006fa:	d116      	bne.n	800072a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80006fc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000700:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000704:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000708:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800070c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000710:	f04f 0c0f 	mov.w	ip, #15
 8000714:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000718:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800071c:	690f      	ldr	r7, [r1, #16]
 800071e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000722:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000726:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800072a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800072c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800072e:	f004 0703 	and.w	r7, r4, #3
 8000732:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000736:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800073a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800073c:	00e6      	lsls	r6, r4, #3
 800073e:	d561      	bpl.n	8000804 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000740:	f04f 0b00 	mov.w	fp, #0
 8000744:	f8cd b00c 	str.w	fp, [sp, #12]
 8000748:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074c:	4e39      	ldr	r6, [pc, #228]	; (8000834 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000752:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000756:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800075a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800075e:	9703      	str	r7, [sp, #12]
 8000760:	9f03      	ldr	r7, [sp, #12]
 8000762:	f023 0703 	bic.w	r7, r3, #3
 8000766:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800076a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800076e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000772:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000776:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800077a:	f04f 0e0f 	mov.w	lr, #15
 800077e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000782:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000784:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000788:	d043      	beq.n	8000812 <HAL_GPIO_Init+0x192>
 800078a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800078e:	42b0      	cmp	r0, r6
 8000790:	d041      	beq.n	8000816 <HAL_GPIO_Init+0x196>
 8000792:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000796:	42b0      	cmp	r0, r6
 8000798:	d03f      	beq.n	800081a <HAL_GPIO_Init+0x19a>
 800079a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800079e:	42b0      	cmp	r0, r6
 80007a0:	d03d      	beq.n	800081e <HAL_GPIO_Init+0x19e>
 80007a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007a6:	42b0      	cmp	r0, r6
 80007a8:	d03b      	beq.n	8000822 <HAL_GPIO_Init+0x1a2>
 80007aa:	4548      	cmp	r0, r9
 80007ac:	d03b      	beq.n	8000826 <HAL_GPIO_Init+0x1a6>
 80007ae:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80007b2:	42b0      	cmp	r0, r6
 80007b4:	d039      	beq.n	800082a <HAL_GPIO_Init+0x1aa>
 80007b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ba:	42b0      	cmp	r0, r6
 80007bc:	bf14      	ite	ne
 80007be:	2608      	movne	r6, #8
 80007c0:	2607      	moveq	r6, #7
 80007c2:	fa06 f60c 	lsl.w	r6, r6, ip
 80007c6:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007ca:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007cc:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007ce:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007d0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007d4:	bf0c      	ite	eq
 80007d6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007d8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007da:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007dc:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007de:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007e2:	bf0c      	ite	eq
 80007e4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007e6:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80007e8:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ea:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007ec:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007f0:	bf0c      	ite	eq
 80007f2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007f4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80007f6:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80007f8:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007fa:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007fc:	bf54      	ite	pl
 80007fe:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000800:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000802:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000804:	3301      	adds	r3, #1
 8000806:	2b10      	cmp	r3, #16
 8000808:	f47f af45 	bne.w	8000696 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800080c:	b005      	add	sp, #20
 800080e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000812:	465e      	mov	r6, fp
 8000814:	e7d5      	b.n	80007c2 <HAL_GPIO_Init+0x142>
 8000816:	2601      	movs	r6, #1
 8000818:	e7d3      	b.n	80007c2 <HAL_GPIO_Init+0x142>
 800081a:	2602      	movs	r6, #2
 800081c:	e7d1      	b.n	80007c2 <HAL_GPIO_Init+0x142>
 800081e:	2603      	movs	r6, #3
 8000820:	e7cf      	b.n	80007c2 <HAL_GPIO_Init+0x142>
 8000822:	2604      	movs	r6, #4
 8000824:	e7cd      	b.n	80007c2 <HAL_GPIO_Init+0x142>
 8000826:	2605      	movs	r6, #5
 8000828:	e7cb      	b.n	80007c2 <HAL_GPIO_Init+0x142>
 800082a:	2606      	movs	r6, #6
 800082c:	e7c9      	b.n	80007c2 <HAL_GPIO_Init+0x142>
 800082e:	bf00      	nop
 8000830:	40013c00 	.word	0x40013c00
 8000834:	40020000 	.word	0x40020000
 8000838:	40023800 	.word	0x40023800
 800083c:	40021400 	.word	0x40021400

08000840 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000840:	6943      	ldr	r3, [r0, #20]
 8000842:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000846:	bf08      	it	eq
 8000848:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800084a:	6181      	str	r1, [r0, #24]
 800084c:	4770      	bx	lr
	...

08000850 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000850:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000854:	4604      	mov	r4, r0
 8000856:	b908      	cbnz	r0, 800085c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000858:	2001      	movs	r0, #1
 800085a:	e03f      	b.n	80008dc <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800085c:	6803      	ldr	r3, [r0, #0]
 800085e:	07dd      	lsls	r5, r3, #31
 8000860:	d410      	bmi.n	8000884 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000862:	6823      	ldr	r3, [r4, #0]
 8000864:	0798      	lsls	r0, r3, #30
 8000866:	d45a      	bmi.n	800091e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	071a      	lsls	r2, r3, #28
 800086c:	f100 809c 	bmi.w	80009a8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	075b      	lsls	r3, r3, #29
 8000874:	f100 80ba 	bmi.w	80009ec <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000878:	69a0      	ldr	r0, [r4, #24]
 800087a:	2800      	cmp	r0, #0
 800087c:	f040 811b 	bne.w	8000ab6 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000880:	2000      	movs	r0, #0
 8000882:	e02b      	b.n	80008dc <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000884:	4ba4      	ldr	r3, [pc, #656]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
 8000886:	689a      	ldr	r2, [r3, #8]
 8000888:	f002 020c 	and.w	r2, r2, #12
 800088c:	2a04      	cmp	r2, #4
 800088e:	d007      	beq.n	80008a0 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000890:	689a      	ldr	r2, [r3, #8]
 8000892:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000896:	2a08      	cmp	r2, #8
 8000898:	d10a      	bne.n	80008b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	0259      	lsls	r1, r3, #9
 800089e:	d507      	bpl.n	80008b0 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a0:	4b9d      	ldr	r3, [pc, #628]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	039a      	lsls	r2, r3, #14
 80008a6:	d5dc      	bpl.n	8000862 <HAL_RCC_OscConfig+0x12>
 80008a8:	6863      	ldr	r3, [r4, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1d9      	bne.n	8000862 <HAL_RCC_OscConfig+0x12>
 80008ae:	e7d3      	b.n	8000858 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b0:	6863      	ldr	r3, [r4, #4]
 80008b2:	4d99      	ldr	r5, [pc, #612]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
 80008b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008b8:	d113      	bne.n	80008e2 <HAL_RCC_OscConfig+0x92>
 80008ba:	682b      	ldr	r3, [r5, #0]
 80008bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008c2:	f7ff fe53 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c6:	4d94      	ldr	r5, [pc, #592]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80008c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ca:	682b      	ldr	r3, [r5, #0]
 80008cc:	039b      	lsls	r3, r3, #14
 80008ce:	d4c8      	bmi.n	8000862 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d0:	f7ff fe4c 	bl	800056c <HAL_GetTick>
 80008d4:	1b80      	subs	r0, r0, r6
 80008d6:	2864      	cmp	r0, #100	; 0x64
 80008d8:	d9f7      	bls.n	80008ca <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80008da:	2003      	movs	r0, #3
}
 80008dc:	b002      	add	sp, #8
 80008de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e6:	d104      	bne.n	80008f2 <HAL_RCC_OscConfig+0xa2>
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ee:	602b      	str	r3, [r5, #0]
 80008f0:	e7e3      	b.n	80008ba <HAL_RCC_OscConfig+0x6a>
 80008f2:	682a      	ldr	r2, [r5, #0]
 80008f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008f8:	602a      	str	r2, [r5, #0]
 80008fa:	682a      	ldr	r2, [r5, #0]
 80008fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000900:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1dd      	bne.n	80008c2 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000906:	f7ff fe31 	bl	800056c <HAL_GetTick>
 800090a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800090c:	682b      	ldr	r3, [r5, #0]
 800090e:	039f      	lsls	r7, r3, #14
 8000910:	d5a7      	bpl.n	8000862 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000912:	f7ff fe2b 	bl	800056c <HAL_GetTick>
 8000916:	1b80      	subs	r0, r0, r6
 8000918:	2864      	cmp	r0, #100	; 0x64
 800091a:	d9f7      	bls.n	800090c <HAL_RCC_OscConfig+0xbc>
 800091c:	e7dd      	b.n	80008da <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800091e:	4b7e      	ldr	r3, [pc, #504]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	f012 0f0c 	tst.w	r2, #12
 8000926:	d007      	beq.n	8000938 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800092e:	2a08      	cmp	r2, #8
 8000930:	d111      	bne.n	8000956 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	025e      	lsls	r6, r3, #9
 8000936:	d40e      	bmi.n	8000956 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000938:	4b77      	ldr	r3, [pc, #476]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	0795      	lsls	r5, r2, #30
 800093e:	d502      	bpl.n	8000946 <HAL_RCC_OscConfig+0xf6>
 8000940:	68e2      	ldr	r2, [r4, #12]
 8000942:	2a01      	cmp	r2, #1
 8000944:	d188      	bne.n	8000858 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	6921      	ldr	r1, [r4, #16]
 800094a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800094e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000952:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000954:	e788      	b.n	8000868 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000956:	68e2      	ldr	r2, [r4, #12]
 8000958:	4b70      	ldr	r3, [pc, #448]	; (8000b1c <HAL_RCC_OscConfig+0x2cc>)
 800095a:	b1b2      	cbz	r2, 800098a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000960:	f7ff fe04 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000964:	4d6c      	ldr	r5, [pc, #432]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000966:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	0798      	lsls	r0, r3, #30
 800096c:	d507      	bpl.n	800097e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800096e:	682b      	ldr	r3, [r5, #0]
 8000970:	6922      	ldr	r2, [r4, #16]
 8000972:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000976:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800097a:	602b      	str	r3, [r5, #0]
 800097c:	e774      	b.n	8000868 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800097e:	f7ff fdf5 	bl	800056c <HAL_GetTick>
 8000982:	1b80      	subs	r0, r0, r6
 8000984:	2802      	cmp	r0, #2
 8000986:	d9ef      	bls.n	8000968 <HAL_RCC_OscConfig+0x118>
 8000988:	e7a7      	b.n	80008da <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800098a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800098c:	f7ff fdee 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000990:	4d61      	ldr	r5, [pc, #388]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000992:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	0799      	lsls	r1, r3, #30
 8000998:	f57f af66 	bpl.w	8000868 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800099c:	f7ff fde6 	bl	800056c <HAL_GetTick>
 80009a0:	1b80      	subs	r0, r0, r6
 80009a2:	2802      	cmp	r0, #2
 80009a4:	d9f6      	bls.n	8000994 <HAL_RCC_OscConfig+0x144>
 80009a6:	e798      	b.n	80008da <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009a8:	6962      	ldr	r2, [r4, #20]
 80009aa:	4b5d      	ldr	r3, [pc, #372]	; (8000b20 <HAL_RCC_OscConfig+0x2d0>)
 80009ac:	b17a      	cbz	r2, 80009ce <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009ae:	2201      	movs	r2, #1
 80009b0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009b2:	f7ff fddb 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009b6:	4d58      	ldr	r5, [pc, #352]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009b8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009bc:	079f      	lsls	r7, r3, #30
 80009be:	f53f af57 	bmi.w	8000870 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009c2:	f7ff fdd3 	bl	800056c <HAL_GetTick>
 80009c6:	1b80      	subs	r0, r0, r6
 80009c8:	2802      	cmp	r0, #2
 80009ca:	d9f6      	bls.n	80009ba <HAL_RCC_OscConfig+0x16a>
 80009cc:	e785      	b.n	80008da <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80009ce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009d0:	f7ff fdcc 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d4:	4d50      	ldr	r5, [pc, #320]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80009d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009da:	0798      	lsls	r0, r3, #30
 80009dc:	f57f af48 	bpl.w	8000870 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e0:	f7ff fdc4 	bl	800056c <HAL_GetTick>
 80009e4:	1b80      	subs	r0, r0, r6
 80009e6:	2802      	cmp	r0, #2
 80009e8:	d9f6      	bls.n	80009d8 <HAL_RCC_OscConfig+0x188>
 80009ea:	e776      	b.n	80008da <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009ec:	4b4a      	ldr	r3, [pc, #296]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
 80009ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009f4:	d128      	bne.n	8000a48 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	9201      	str	r2, [sp, #4]
 80009f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009fe:	641a      	str	r2, [r3, #64]	; 0x40
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a0a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a0c:	4d45      	ldr	r5, [pc, #276]	; (8000b24 <HAL_RCC_OscConfig+0x2d4>)
 8000a0e:	682b      	ldr	r3, [r5, #0]
 8000a10:	05d9      	lsls	r1, r3, #23
 8000a12:	d51b      	bpl.n	8000a4c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a14:	68a3      	ldr	r3, [r4, #8]
 8000a16:	4d40      	ldr	r5, [pc, #256]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d127      	bne.n	8000a6c <HAL_RCC_OscConfig+0x21c>
 8000a1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a24:	f7ff fda2 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a28:	4d3b      	ldr	r5, [pc, #236]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a2a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a2c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a32:	079b      	lsls	r3, r3, #30
 8000a34:	d539      	bpl.n	8000aaa <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	f43f af1e 	beq.w	8000878 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a3c:	4a36      	ldr	r2, [pc, #216]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
 8000a3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	e717      	b.n	8000878 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000a48:	2600      	movs	r6, #0
 8000a4a:	e7df      	b.n	8000a0c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a4c:	682b      	ldr	r3, [r5, #0]
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a54:	f7ff fd8a 	bl	800056c <HAL_GetTick>
 8000a58:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a5a:	682b      	ldr	r3, [r5, #0]
 8000a5c:	05da      	lsls	r2, r3, #23
 8000a5e:	d4d9      	bmi.n	8000a14 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a60:	f7ff fd84 	bl	800056c <HAL_GetTick>
 8000a64:	1bc0      	subs	r0, r0, r7
 8000a66:	2802      	cmp	r0, #2
 8000a68:	d9f7      	bls.n	8000a5a <HAL_RCC_OscConfig+0x20a>
 8000a6a:	e736      	b.n	80008da <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a6c:	2b05      	cmp	r3, #5
 8000a6e:	d104      	bne.n	8000a7a <HAL_RCC_OscConfig+0x22a>
 8000a70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	672b      	str	r3, [r5, #112]	; 0x70
 8000a78:	e7d0      	b.n	8000a1c <HAL_RCC_OscConfig+0x1cc>
 8000a7a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a7c:	f022 0201 	bic.w	r2, r2, #1
 8000a80:	672a      	str	r2, [r5, #112]	; 0x70
 8000a82:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a84:	f022 0204 	bic.w	r2, r2, #4
 8000a88:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1ca      	bne.n	8000a24 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a8e:	f7ff fd6d 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a92:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a96:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a9a:	0798      	lsls	r0, r3, #30
 8000a9c:	d5cb      	bpl.n	8000a36 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a9e:	f7ff fd65 	bl	800056c <HAL_GetTick>
 8000aa2:	1bc0      	subs	r0, r0, r7
 8000aa4:	4540      	cmp	r0, r8
 8000aa6:	d9f7      	bls.n	8000a98 <HAL_RCC_OscConfig+0x248>
 8000aa8:	e717      	b.n	80008da <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aaa:	f7ff fd5f 	bl	800056c <HAL_GetTick>
 8000aae:	1bc0      	subs	r0, r0, r7
 8000ab0:	4540      	cmp	r0, r8
 8000ab2:	d9bd      	bls.n	8000a30 <HAL_RCC_OscConfig+0x1e0>
 8000ab4:	e711      	b.n	80008da <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ab6:	4d18      	ldr	r5, [pc, #96]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
 8000ab8:	68ab      	ldr	r3, [r5, #8]
 8000aba:	f003 030c 	and.w	r3, r3, #12
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d047      	beq.n	8000b52 <HAL_RCC_OscConfig+0x302>
 8000ac2:	4e19      	ldr	r6, [pc, #100]	; (8000b28 <HAL_RCC_OscConfig+0x2d8>)
 8000ac4:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ac6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ac8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aca:	d135      	bne.n	8000b38 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000acc:	f7ff fd4e 	bl	800056c <HAL_GetTick>
 8000ad0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ad2:	682b      	ldr	r3, [r5, #0]
 8000ad4:	0199      	lsls	r1, r3, #6
 8000ad6:	d429      	bmi.n	8000b2c <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ad8:	6a22      	ldr	r2, [r4, #32]
 8000ada:	69e3      	ldr	r3, [r4, #28]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ae0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ae4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ae6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000aea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000aec:	4c0a      	ldr	r4, [pc, #40]	; (8000b18 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000aee:	0852      	lsrs	r2, r2, #1
 8000af0:	3a01      	subs	r2, #1
 8000af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000af6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000af8:	2301      	movs	r3, #1
 8000afa:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000afc:	f7ff fd36 	bl	800056c <HAL_GetTick>
 8000b00:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b02:	6823      	ldr	r3, [r4, #0]
 8000b04:	019a      	lsls	r2, r3, #6
 8000b06:	f53f aebb 	bmi.w	8000880 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b0a:	f7ff fd2f 	bl	800056c <HAL_GetTick>
 8000b0e:	1b40      	subs	r0, r0, r5
 8000b10:	2802      	cmp	r0, #2
 8000b12:	d9f6      	bls.n	8000b02 <HAL_RCC_OscConfig+0x2b2>
 8000b14:	e6e1      	b.n	80008da <HAL_RCC_OscConfig+0x8a>
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	42470000 	.word	0x42470000
 8000b20:	42470e80 	.word	0x42470e80
 8000b24:	40007000 	.word	0x40007000
 8000b28:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b2c:	f7ff fd1e 	bl	800056c <HAL_GetTick>
 8000b30:	1bc0      	subs	r0, r0, r7
 8000b32:	2802      	cmp	r0, #2
 8000b34:	d9cd      	bls.n	8000ad2 <HAL_RCC_OscConfig+0x282>
 8000b36:	e6d0      	b.n	80008da <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000b38:	f7ff fd18 	bl	800056c <HAL_GetTick>
 8000b3c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b3e:	682b      	ldr	r3, [r5, #0]
 8000b40:	019b      	lsls	r3, r3, #6
 8000b42:	f57f ae9d 	bpl.w	8000880 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b46:	f7ff fd11 	bl	800056c <HAL_GetTick>
 8000b4a:	1b00      	subs	r0, r0, r4
 8000b4c:	2802      	cmp	r0, #2
 8000b4e:	d9f6      	bls.n	8000b3e <HAL_RCC_OscConfig+0x2ee>
 8000b50:	e6c3      	b.n	80008da <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b52:	2801      	cmp	r0, #1
 8000b54:	f43f aec2 	beq.w	80008dc <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000b58:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b5a:	69e3      	ldr	r3, [r4, #28]
 8000b5c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000b60:	429a      	cmp	r2, r3
 8000b62:	f47f ae79 	bne.w	8000858 <HAL_RCC_OscConfig+0x8>
 8000b66:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b68:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	f47f ae73 	bne.w	8000858 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000b72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b78:	4003      	ands	r3, r0
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	f47f ae6c 	bne.w	8000858 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b82:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000b86:	4293      	cmp	r3, r2
 8000b88:	f47f ae66 	bne.w	8000858 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000b8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000b8e:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000b92:	1ac0      	subs	r0, r0, r3
 8000b94:	bf18      	it	ne
 8000b96:	2001      	movne	r0, #1
 8000b98:	e6a0      	b.n	80008dc <HAL_RCC_OscConfig+0x8c>
 8000b9a:	bf00      	nop

08000b9c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b9c:	4913      	ldr	r1, [pc, #76]	; (8000bec <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b9e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba0:	688b      	ldr	r3, [r1, #8]
 8000ba2:	f003 030c 	and.w	r3, r3, #12
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d003      	beq.n	8000bb2 <HAL_RCC_GetSysClockFreq+0x16>
 8000baa:	2b08      	cmp	r3, #8
 8000bac:	d003      	beq.n	8000bb6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bae:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bb0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bb2:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000bb4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bb6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bb8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bba:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bbc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc0:	bf14      	ite	ne
 8000bc2:	480c      	ldrne	r0, [pc, #48]	; (8000bf4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc4:	480a      	ldreq	r0, [pc, #40]	; (8000bf0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bca:	bf18      	it	ne
 8000bcc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bd2:	fba1 0100 	umull	r0, r1, r1, r0
 8000bd6:	f7ff faf7 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <HAL_RCC_GetSysClockFreq+0x50>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000be2:	3301      	adds	r3, #1
 8000be4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000be6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bea:	bd08      	pop	{r3, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	00f42400 	.word	0x00f42400
 8000bf4:	017d7840 	.word	0x017d7840

08000bf8 <HAL_RCC_ClockConfig>:
{
 8000bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bfc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000bfe:	4604      	mov	r4, r0
 8000c00:	b910      	cbnz	r0, 8000c08 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c02:	2001      	movs	r0, #1
 8000c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c08:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <HAL_RCC_ClockConfig+0x124>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	f002 020f 	and.w	r2, r2, #15
 8000c10:	428a      	cmp	r2, r1
 8000c12:	d329      	bcc.n	8000c68 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c14:	6821      	ldr	r1, [r4, #0]
 8000c16:	078f      	lsls	r7, r1, #30
 8000c18:	d42e      	bmi.n	8000c78 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c1a:	07c8      	lsls	r0, r1, #31
 8000c1c:	d441      	bmi.n	8000ca2 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c1e:	4b3f      	ldr	r3, [pc, #252]	; (8000d1c <HAL_RCC_ClockConfig+0x124>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	f002 020f 	and.w	r2, r2, #15
 8000c26:	4295      	cmp	r5, r2
 8000c28:	d367      	bcc.n	8000cfa <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c2a:	6822      	ldr	r2, [r4, #0]
 8000c2c:	0751      	lsls	r1, r2, #29
 8000c2e:	d46d      	bmi.n	8000d0c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c30:	0713      	lsls	r3, r2, #28
 8000c32:	d507      	bpl.n	8000c44 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c34:	4a3a      	ldr	r2, [pc, #232]	; (8000d20 <HAL_RCC_ClockConfig+0x128>)
 8000c36:	6921      	ldr	r1, [r4, #16]
 8000c38:	6893      	ldr	r3, [r2, #8]
 8000c3a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c42:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c44:	f7ff ffaa 	bl	8000b9c <HAL_RCC_GetSysClockFreq>
 8000c48:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <HAL_RCC_ClockConfig+0x128>)
 8000c4a:	4a36      	ldr	r2, [pc, #216]	; (8000d24 <HAL_RCC_ClockConfig+0x12c>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	40d8      	lsrs	r0, r3
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <HAL_RCC_ClockConfig+0x130>)
 8000c58:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <HAL_RCC_ClockConfig+0x134>)
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	f7ff fc3b 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000c62:	2000      	movs	r0, #0
 8000c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d1c5      	bne.n	8000c02 <HAL_RCC_ClockConfig+0xa>
 8000c76:	e7cd      	b.n	8000c14 <HAL_RCC_ClockConfig+0x1c>
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c7a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c7e:	bf1e      	ittt	ne
 8000c80:	689a      	ldrne	r2, [r3, #8]
 8000c82:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c86:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c88:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c8a:	bf42      	ittt	mi
 8000c8c:	689a      	ldrmi	r2, [r3, #8]
 8000c8e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c92:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	68a0      	ldr	r0, [r4, #8]
 8000c98:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c9c:	4302      	orrs	r2, r0
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	e7bb      	b.n	8000c1a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ca2:	6862      	ldr	r2, [r4, #4]
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <HAL_RCC_ClockConfig+0x128>)
 8000ca6:	2a01      	cmp	r2, #1
 8000ca8:	d11d      	bne.n	8000ce6 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb0:	d0a7      	beq.n	8000c02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cb2:	4e1b      	ldr	r6, [pc, #108]	; (8000d20 <HAL_RCC_ClockConfig+0x128>)
 8000cb4:	68b3      	ldr	r3, [r6, #8]
 8000cb6:	f023 0303 	bic.w	r3, r3, #3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cbe:	f7ff fc55 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cc2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cc6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cc8:	68b3      	ldr	r3, [r6, #8]
 8000cca:	6862      	ldr	r2, [r4, #4]
 8000ccc:	f003 030c 	and.w	r3, r3, #12
 8000cd0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cd4:	d0a3      	beq.n	8000c1e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cd6:	f7ff fc49 	bl	800056c <HAL_GetTick>
 8000cda:	1bc0      	subs	r0, r0, r7
 8000cdc:	4540      	cmp	r0, r8
 8000cde:	d9f3      	bls.n	8000cc8 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000ce0:	2003      	movs	r0, #3
}
 8000ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ce6:	1e91      	subs	r1, r2, #2
 8000ce8:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cea:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cec:	d802      	bhi.n	8000cf4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cf2:	e7dd      	b.n	8000cb0 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf4:	f013 0f02 	tst.w	r3, #2
 8000cf8:	e7da      	b.n	8000cb0 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cfa:	b2ea      	uxtb	r2, r5
 8000cfc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 030f 	and.w	r3, r3, #15
 8000d04:	429d      	cmp	r5, r3
 8000d06:	f47f af7c 	bne.w	8000c02 <HAL_RCC_ClockConfig+0xa>
 8000d0a:	e78e      	b.n	8000c2a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d0c:	4904      	ldr	r1, [pc, #16]	; (8000d20 <HAL_RCC_ClockConfig+0x128>)
 8000d0e:	68e0      	ldr	r0, [r4, #12]
 8000d10:	688b      	ldr	r3, [r1, #8]
 8000d12:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d16:	4303      	orrs	r3, r0
 8000d18:	608b      	str	r3, [r1, #8]
 8000d1a:	e789      	b.n	8000c30 <HAL_RCC_ClockConfig+0x38>
 8000d1c:	40023c00 	.word	0x40023c00
 8000d20:	40023800 	.word	0x40023800
 8000d24:	080017c4 	.word	0x080017c4
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8000d30:	6803      	ldr	r3, [r0, #0]
 8000d32:	f013 0f05 	tst.w	r3, #5
{
 8000d36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d38:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8000d3a:	d105      	bne.n	8000d48 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d3c:	6828      	ldr	r0, [r5, #0]
 8000d3e:	f010 0002 	ands.w	r0, r0, #2
 8000d42:	d128      	bne.n	8000d96 <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8000d44:	b003      	add	sp, #12
 8000d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8000d48:	4c41      	ldr	r4, [pc, #260]	; (8000e50 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000d4a:	4e42      	ldr	r6, [pc, #264]	; (8000e54 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000d50:	f7ff fc0c 	bl	800056c <HAL_GetTick>
 8000d54:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000d56:	6833      	ldr	r3, [r6, #0]
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	d415      	bmi.n	8000d88 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8000d5c:	68ab      	ldr	r3, [r5, #8]
 8000d5e:	686a      	ldr	r2, [r5, #4]
 8000d60:	071b      	lsls	r3, r3, #28
 8000d62:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d66:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000d6e:	f7ff fbfd 	bl	800056c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000d72:	4c38      	ldr	r4, [pc, #224]	; (8000e54 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8000d74:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	0118      	lsls	r0, r3, #4
 8000d7a:	d4df      	bmi.n	8000d3c <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000d7c:	f7ff fbf6 	bl	800056c <HAL_GetTick>
 8000d80:	1b80      	subs	r0, r0, r6
 8000d82:	2802      	cmp	r0, #2
 8000d84:	d9f7      	bls.n	8000d76 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8000d86:	e004      	b.n	8000d92 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000d88:	f7ff fbf0 	bl	800056c <HAL_GetTick>
 8000d8c:	1bc0      	subs	r0, r0, r7
 8000d8e:	2802      	cmp	r0, #2
 8000d90:	d9e1      	bls.n	8000d56 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8000d92:	2003      	movs	r0, #3
 8000d94:	e7d6      	b.n	8000d44 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8000d9c:	4c2e      	ldr	r4, [pc, #184]	; (8000e58 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000da4:	641a      	str	r2, [r3, #64]	; 0x40
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000db0:	6823      	ldr	r3, [r4, #0]
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db6:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000db8:	f7ff fbd8 	bl	800056c <HAL_GetTick>
 8000dbc:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	05d9      	lsls	r1, r3, #23
 8000dc2:	d51b      	bpl.n	8000dfc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000dc4:	4c23      	ldr	r4, [pc, #140]	; (8000e54 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000dc6:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000dc8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000dcc:	d11c      	bne.n	8000e08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000dce:	68eb      	ldr	r3, [r5, #12]
 8000dd0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000dd4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000dd8:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000dda:	d134      	bne.n	8000e46 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8000ddc:	6891      	ldr	r1, [r2, #8]
 8000dde:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000de2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000de6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000dea:	4301      	orrs	r1, r0
 8000dec:	6091      	str	r1, [r2, #8]
 8000dee:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000df4:	430b      	orrs	r3, r1
 8000df6:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8000df8:	2000      	movs	r0, #0
 8000dfa:	e7a3      	b.n	8000d44 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000dfc:	f7ff fbb6 	bl	800056c <HAL_GetTick>
 8000e00:	1b80      	subs	r0, r0, r6
 8000e02:	2802      	cmp	r0, #2
 8000e04:	d9db      	bls.n	8000dbe <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8000e06:	e7c4      	b.n	8000d92 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e08:	68ea      	ldr	r2, [r5, #12]
 8000e0a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d0dd      	beq.n	8000dce <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e12:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e1e:	2100      	movs	r1, #0
 8000e20:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8000e22:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8000e24:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000e26:	07da      	lsls	r2, r3, #31
 8000e28:	d5d1      	bpl.n	8000dce <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fb9f 	bl	800056c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e2e:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000e32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e34:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000e36:	079b      	lsls	r3, r3, #30
 8000e38:	d4c9      	bmi.n	8000dce <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e3a:	f7ff fb97 	bl	800056c <HAL_GetTick>
 8000e3e:	1b80      	subs	r0, r0, r6
 8000e40:	42b8      	cmp	r0, r7
 8000e42:	d9f7      	bls.n	8000e34 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8000e44:	e7a5      	b.n	8000d92 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000e46:	6891      	ldr	r1, [r2, #8]
 8000e48:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000e4c:	e7ce      	b.n	8000dec <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8000e4e:	bf00      	nop
 8000e50:	42470068 	.word	0x42470068
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000
 8000e5c:	42470e40 	.word	0x42470e40

08000e60 <HAL_RTC_DeactivateAlarm>:

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8000e60:	7f03      	ldrb	r3, [r0, #28]
 8000e62:	2b01      	cmp	r3, #1
{
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	4604      	mov	r4, r0
 8000e68:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8000e6c:	d045      	beq.n	8000efa <HAL_RTC_DeactivateAlarm+0x9a>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	7723      	strb	r3, [r4, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000e72:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8000e74:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000e76:	22ca      	movs	r2, #202	; 0xca
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
 8000e7a:	2253      	movs	r2, #83	; 0x53
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8000e7e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8000e82:	689a      	ldr	r2, [r3, #8]
  if(Alarm == RTC_ALARM_A)
 8000e84:	d123      	bne.n	8000ece <HAL_RTC_DeactivateAlarm+0x6e>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8000e86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e8a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e92:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e94:	f7ff fb6a 	bl	800056c <HAL_GetTick>
 8000e98:	4606      	mov	r6, r0

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	68dd      	ldr	r5, [r3, #12]
 8000e9e:	f015 0501 	ands.w	r5, r5, #1
 8000ea2:	d007      	beq.n	8000eb4 <HAL_RTC_DeactivateAlarm+0x54>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	22ff      	movs	r2, #255	; 0xff
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8000eaa:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8000eac:	2301      	movs	r3, #1
 8000eae:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8000eb0:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8000eb4:	f7ff fb5a 	bl	800056c <HAL_GetTick>
 8000eb8:	1b80      	subs	r0, r0, r6
 8000eba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ebe:	d9ec      	bls.n	8000e9a <HAL_RTC_DeactivateAlarm+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8000ec4:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8000ec8:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8000eca:	7725      	strb	r5, [r4, #28]
        return HAL_TIMEOUT;
 8000ecc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8000ece:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ed2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000eda:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000edc:	f7ff fb46 	bl	800056c <HAL_GetTick>
 8000ee0:	4606      	mov	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	68dd      	ldr	r5, [r3, #12]
 8000ee6:	f015 0502 	ands.w	r5, r5, #2
 8000eea:	d1db      	bne.n	8000ea4 <HAL_RTC_DeactivateAlarm+0x44>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8000eec:	f7ff fb3e 	bl	800056c <HAL_GetTick>
 8000ef0:	1b80      	subs	r0, r0, r6
 8000ef2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ef6:	d9f4      	bls.n	8000ee2 <HAL_RTC_DeactivateAlarm+0x82>
 8000ef8:	e7e2      	b.n	8000ec0 <HAL_RTC_DeactivateAlarm+0x60>
}
 8000efa:	bd70      	pop	{r4, r5, r6, pc}

08000efc <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8000efc:	6803      	ldr	r3, [r0, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	04d2      	lsls	r2, r2, #19
{
 8000f02:	b510      	push	{r4, lr}
 8000f04:	4604      	mov	r4, r0
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8000f06:	d50a      	bpl.n	8000f1e <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	05d9      	lsls	r1, r3, #23
 8000f0c:	d507      	bpl.n	8000f1e <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8000f0e:	f000 fb99 	bl	8001644 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8000f12:	6822      	ldr	r2, [r4, #0]
 8000f14:	68d3      	ldr	r3, [r2, #12]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8000f1c:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	0492      	lsls	r2, r2, #18
 8000f24:	d50b      	bpl.n	8000f3e <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	059b      	lsls	r3, r3, #22
 8000f2a:	d508      	bpl.n	8000f3e <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f000 fa6c 	bl	800140a <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8000f32:	6822      	ldr	r2, [r4, #0]
 8000f34:	68d3      	ldr	r3, [r2, #12]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	f463 7320 	orn	r3, r3, #640	; 0x280
 8000f3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8000f3e:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_RTC_AlarmIRQHandler+0x50>)
 8000f40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f44:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8000f46:	2301      	movs	r3, #1
 8000f48:	7763      	strb	r3, [r4, #29]
 8000f4a:	bd10      	pop	{r4, pc}
 8000f4c:	40013c00 	.word	0x40013c00

08000f50 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8000f50:	6802      	ldr	r2, [r0, #0]
{
 8000f52:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8000f54:	68d3      	ldr	r3, [r2, #12]
 8000f56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000f5a:	60d3      	str	r3, [r2, #12]
{
 8000f5c:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f5e:	f7ff fb05 	bl	800056c <HAL_GetTick>
 8000f62:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	069b      	lsls	r3, r3, #26
 8000f6a:	d501      	bpl.n	8000f70 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8000f70:	f7ff fafc 	bl	800056c <HAL_GetTick>
 8000f74:	1b40      	subs	r0, r0, r5
 8000f76:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f7a:	d9f3      	bls.n	8000f64 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8000f7c:	2003      	movs	r0, #3
}
 8000f7e:	bd38      	pop	{r3, r4, r5, pc}

08000f80 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8000f80:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8000f82:	6803      	ldr	r3, [r0, #0]
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	0652      	lsls	r2, r2, #25
{
 8000f88:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8000f8a:	d501      	bpl.n	8000f90 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8000f96:	f7ff fae9 	bl	800056c <HAL_GetTick>
 8000f9a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	065b      	lsls	r3, r3, #25
 8000fa2:	d4f3      	bmi.n	8000f8c <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8000fa4:	f7ff fae2 	bl	800056c <HAL_GetTick>
 8000fa8:	1b40      	subs	r0, r0, r5
 8000faa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000fae:	d9f5      	bls.n	8000f9c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8000fb0:	2003      	movs	r0, #3
}
 8000fb2:	bd38      	pop	{r3, r4, r5, pc}

08000fb4 <HAL_RTC_Init>:
{
 8000fb4:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	b1b8      	cbz	r0, 8000fea <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8000fba:	7f43      	ldrb	r3, [r0, #29]
 8000fbc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fc0:	b913      	cbnz	r3, 8000fc8 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8000fc2:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8000fc4:	f000 fb7e 	bl	80016c4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	22ca      	movs	r2, #202	; 0xca
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fd2:	2253      	movs	r2, #83	; 0x53
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f7ff ffd2 	bl	8000f80 <RTC_EnterInitMode>
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	4605      	mov	r5, r0
 8000fe0:	b128      	cbz	r0, 8000fee <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000fe2:	22ff      	movs	r2, #255	; 0xff
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8000fea:	2501      	movs	r5, #1
 8000fec:	e02e      	b.n	800104c <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8000fee:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8000ff0:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8000ff2:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8000ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ffa:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8000ffc:	6862      	ldr	r2, [r4, #4]
 8000ffe:	6899      	ldr	r1, [r3, #8]
 8001000:	4302      	orrs	r2, r0
 8001002:	6960      	ldr	r0, [r4, #20]
 8001004:	4302      	orrs	r2, r0
 8001006:	430a      	orrs	r2, r1
 8001008:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800100a:	68e2      	ldr	r2, [r4, #12]
 800100c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	68a1      	ldr	r1, [r4, #8]
 8001012:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001016:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800101e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	069b      	lsls	r3, r3, #26
 8001024:	d405      	bmi.n	8001032 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001026:	4620      	mov	r0, r4
 8001028:	f7ff ff92 	bl	8000f50 <HAL_RTC_WaitForSynchro>
 800102c:	b108      	cbz	r0, 8001032 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	e7d7      	b.n	8000fe2 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001032:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001034:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001038:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800103e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001040:	430a      	orrs	r2, r1
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001044:	22ff      	movs	r2, #255	; 0xff
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001048:	2301      	movs	r3, #1
 800104a:	7763      	strb	r3, [r4, #29]
}
 800104c:	4628      	mov	r0, r5
 800104e:	bd38      	pop	{r3, r4, r5, pc}

08001050 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001050:	2300      	movs	r3, #0

  while(Value >= 10U)
 8001052:	2809      	cmp	r0, #9
 8001054:	d803      	bhi.n	800105e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001056:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800105a:	b2c0      	uxtb	r0, r0
 800105c:	4770      	bx	lr
    Value -= 10U;
 800105e:	380a      	subs	r0, #10
    bcdhigh++;
 8001060:	3301      	adds	r3, #1
    Value -= 10U;
 8001062:	b2c0      	uxtb	r0, r0
 8001064:	e7f5      	b.n	8001052 <RTC_ByteToBcd2+0x2>

08001066 <HAL_RTC_SetTime>:
{
 8001066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001068:	7f03      	ldrb	r3, [r0, #28]
 800106a:	2b01      	cmp	r3, #1
{
 800106c:	4606      	mov	r6, r0
 800106e:	460f      	mov	r7, r1
 8001070:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8001074:	d02f      	beq.n	80010d6 <HAL_RTC_SetTime+0x70>
 8001076:	2301      	movs	r3, #1
 8001078:	7703      	strb	r3, [r0, #28]
 800107a:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800107c:	7745      	strb	r5, [r0, #29]
 800107e:	7808      	ldrb	r0, [r1, #0]
 8001080:	784d      	ldrb	r5, [r1, #1]
 8001082:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001084:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8001086:	bb42      	cbnz	r2, 80010da <HAL_RTC_SetTime+0x74>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001088:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 800108c:	bf08      	it	eq
 800108e:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001090:	f7ff ffde 	bl	8001050 <RTC_ByteToBcd2>
 8001094:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001096:	4628      	mov	r0, r5
 8001098:	f7ff ffda 	bl	8001050 <RTC_ByteToBcd2>
 800109c:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800109e:	4620      	mov	r0, r4
 80010a0:	f7ff ffd6 	bl	8001050 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80010a4:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80010a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80010aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010ae:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80010b2:	6833      	ldr	r3, [r6, #0]
 80010b4:	22ca      	movs	r2, #202	; 0xca
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
 80010b8:	2253      	movs	r2, #83	; 0x53
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80010bc:	4630      	mov	r0, r6
 80010be:	f7ff ff5f 	bl	8000f80 <RTC_EnterInitMode>
 80010c2:	6833      	ldr	r3, [r6, #0]
 80010c4:	4605      	mov	r5, r0
 80010c6:	b1a8      	cbz	r0, 80010f4 <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80010c8:	22ff      	movs	r2, #255	; 0xff
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80010cc:	2304      	movs	r3, #4
 80010ce:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 80010d0:	2300      	movs	r3, #0
 80010d2:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 80010d4:	2501      	movs	r5, #1
}
 80010d6:	4628      	mov	r0, r5
 80010d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80010da:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80010de:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 80010e2:	bf08      	it	eq
 80010e4:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80010e6:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80010ea:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80010ec:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80010ee:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80010f2:	e7de      	b.n	80010b2 <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80010f4:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 80010f8:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 80010fc:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80010fe:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001100:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001102:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001106:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	6899      	ldr	r1, [r3, #8]
 800110c:	4302      	orrs	r2, r0
 800110e:	430a      	orrs	r2, r1
 8001110:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001118:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	069b      	lsls	r3, r3, #26
 800111e:	d40a      	bmi.n	8001136 <HAL_RTC_SetTime+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001120:	4630      	mov	r0, r6
 8001122:	f7ff ff15 	bl	8000f50 <HAL_RTC_WaitForSynchro>
 8001126:	b130      	cbz	r0, 8001136 <HAL_RTC_SetTime+0xd0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001128:	6833      	ldr	r3, [r6, #0]
 800112a:	22ff      	movs	r2, #255	; 0xff
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800112e:	2304      	movs	r3, #4
 8001130:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8001132:	7735      	strb	r5, [r6, #28]
 8001134:	e7ce      	b.n	80010d4 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001136:	6833      	ldr	r3, [r6, #0]
 8001138:	22ff      	movs	r2, #255	; 0xff
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800113c:	2301      	movs	r3, #1
 800113e:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 8001140:	2300      	movs	r3, #0
 8001142:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8001144:	e7c7      	b.n	80010d6 <HAL_RTC_SetTime+0x70>

08001146 <HAL_RTC_SetDate>:
{
 8001146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8001148:	7f03      	ldrb	r3, [r0, #28]
 800114a:	2b01      	cmp	r3, #1
{
 800114c:	4605      	mov	r5, r0
 800114e:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 8001152:	d030      	beq.n	80011b6 <HAL_RTC_SetDate+0x70>
 8001154:	2301      	movs	r3, #1
 8001156:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001158:	7746      	strb	r6, [r0, #29]
 800115a:	784b      	ldrb	r3, [r1, #1]
 800115c:	78c8      	ldrb	r0, [r1, #3]
 800115e:	788e      	ldrb	r6, [r1, #2]
 8001160:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001162:	2a00      	cmp	r2, #0
 8001164:	d148      	bne.n	80011f8 <HAL_RTC_SetDate+0xb2>
 8001166:	06da      	lsls	r2, r3, #27
 8001168:	d503      	bpl.n	8001172 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800116a:	f023 0310 	bic.w	r3, r3, #16
 800116e:	330a      	adds	r3, #10
 8001170:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001172:	f7ff ff6d 	bl	8001050 <RTC_ByteToBcd2>
 8001176:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001178:	7848      	ldrb	r0, [r1, #1]
 800117a:	f7ff ff69 	bl	8001050 <RTC_ByteToBcd2>
 800117e:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001180:	4630      	mov	r0, r6
 8001182:	f7ff ff65 	bl	8001050 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001186:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 800118a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800118e:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001192:	682b      	ldr	r3, [r5, #0]
 8001194:	22ca      	movs	r2, #202	; 0xca
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
 8001198:	2253      	movs	r2, #83	; 0x53
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800119c:	4628      	mov	r0, r5
 800119e:	f7ff feef 	bl	8000f80 <RTC_EnterInitMode>
 80011a2:	682b      	ldr	r3, [r5, #0]
 80011a4:	4606      	mov	r6, r0
 80011a6:	b140      	cbz	r0, 80011ba <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80011a8:	22ff      	movs	r2, #255	; 0xff
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80011ac:	2304      	movs	r3, #4
 80011ae:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80011b0:	2300      	movs	r3, #0
 80011b2:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 80011b4:	2601      	movs	r6, #1
}
 80011b6:	4630      	mov	r0, r6
 80011b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80011ba:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80011be:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80011c2:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ca:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	069b      	lsls	r3, r3, #26
 80011d0:	d40a      	bmi.n	80011e8 <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80011d2:	4628      	mov	r0, r5
 80011d4:	f7ff febc 	bl	8000f50 <HAL_RTC_WaitForSynchro>
 80011d8:	b130      	cbz	r0, 80011e8 <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80011da:	682b      	ldr	r3, [r5, #0]
 80011dc:	22ff      	movs	r2, #255	; 0xff
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80011e0:	2304      	movs	r3, #4
 80011e2:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 80011e4:	772e      	strb	r6, [r5, #28]
 80011e6:	e7e5      	b.n	80011b4 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80011e8:	682b      	ldr	r3, [r5, #0]
 80011ea:	22ff      	movs	r2, #255	; 0xff
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80011ee:	2301      	movs	r3, #1
 80011f0:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80011f2:	2300      	movs	r3, #0
 80011f4:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 80011f6:	e7de      	b.n	80011b6 <HAL_RTC_SetDate+0x70>
                  (((uint32_t)sDate->Month) << 8U) | \
 80011f8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80011fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80011fe:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001200:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8001204:	e7c5      	b.n	8001192 <HAL_RTC_SetDate+0x4c>
	...

08001208 <HAL_RTC_SetAlarm_IT>:
{
 8001208:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800120c:	4b54      	ldr	r3, [pc, #336]	; (8001360 <HAL_RTC_SetAlarm_IT+0x158>)
{
 800120e:	4605      	mov	r5, r0
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001216:	fbb3 f0f0 	udiv	r0, r3, r0
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	4343      	muls	r3, r0
 8001220:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 8001222:	7f2b      	ldrb	r3, [r5, #28]
 8001224:	2b01      	cmp	r3, #1
 8001226:	f04f 0002 	mov.w	r0, #2
 800122a:	d04b      	beq.n	80012c4 <HAL_RTC_SetAlarm_IT+0xbc>
 800122c:	2301      	movs	r3, #1
 800122e:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001230:	7768      	strb	r0, [r5, #29]
 8001232:	682b      	ldr	r3, [r5, #0]
 8001234:	7808      	ldrb	r0, [r1, #0]
 8001236:	784f      	ldrb	r7, [r1, #1]
 8001238:	f891 8002 	ldrb.w	r8, [r1, #2]
 800123c:	f891 6020 	ldrb.w	r6, [r1, #32]
 8001240:	69cc      	ldr	r4, [r1, #28]
 8001242:	f8d1 a014 	ldr.w	sl, [r1, #20]
  if(Format == RTC_FORMAT_BIN)
 8001246:	2a00      	cmp	r2, #0
 8001248:	d13f      	bne.n	80012ca <HAL_RTC_SetAlarm_IT+0xc2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001250:	bf08      	it	eq
 8001252:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001254:	f7ff fefc 	bl	8001050 <RTC_ByteToBcd2>
 8001258:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800125a:	4638      	mov	r0, r7
 800125c:	f7ff fef8 	bl	8001050 <RTC_ByteToBcd2>
 8001260:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001262:	4640      	mov	r0, r8
 8001264:	f7ff fef4 	bl	8001050 <RTC_ByteToBcd2>
 8001268:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800126a:	4630      	mov	r0, r6
 800126c:	f7ff fef0 	bl	8001050 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001270:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001272:	ea44 040a 	orr.w	r4, r4, sl
 8001276:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800127a:	433b      	orrs	r3, r7
 800127c:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
 8001280:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001284:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001288:	698b      	ldr	r3, [r1, #24]
 800128a:	684c      	ldr	r4, [r1, #4]
 800128c:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800128e:	682b      	ldr	r3, [r5, #0]
 8001290:	22ca      	movs	r2, #202	; 0xca
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
 8001294:	2253      	movs	r2, #83	; 0x53
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001298:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800129a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800129e:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 80012a0:	d143      	bne.n	800132a <HAL_RTC_SetAlarm_IT+0x122>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80012a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012a6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80012b0:	60da      	str	r2, [r3, #12]
      if (count-- == 0U)
 80012b2:	9a01      	ldr	r2, [sp, #4]
 80012b4:	1e51      	subs	r1, r2, #1
 80012b6:	9101      	str	r1, [sp, #4]
 80012b8:	b9d2      	cbnz	r2, 80012f0 <HAL_RTC_SetAlarm_IT+0xe8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80012ba:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80012bc:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80012be:	6259      	str	r1, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80012c0:	7768      	strb	r0, [r5, #29]
        __HAL_UNLOCK(hrtc);
 80012c2:	772a      	strb	r2, [r5, #28]
}
 80012c4:	b002      	add	sp, #8
 80012c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80012ca:	689a      	ldr	r2, [r3, #8]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80012cc:	ea44 040a 	orr.w	r4, r4, sl
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80012d0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80012d4:	bf08      	it	eq
 80012d6:	70ca      	strbeq	r2, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80012d8:	ea44 0408 	orr.w	r4, r4, r8
 80012dc:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80012e0:	78cb      	ldrb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80012e2:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 80012e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012ea:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 80012ee:	e7cb      	b.n	8001288 <HAL_RTC_SetAlarm_IT+0x80>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	07d1      	lsls	r1, r2, #31
 80012f4:	d5dd      	bpl.n	80012b2 <HAL_RTC_SetAlarm_IT+0xaa>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80012f6:	61d8      	str	r0, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80012f8:	645c      	str	r4, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001300:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001308:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800130a:	4a16      	ldr	r2, [pc, #88]	; (8001364 <HAL_RTC_SetAlarm_IT+0x15c>)
 800130c:	6811      	ldr	r1, [r2, #0]
 800130e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001312:	6011      	str	r1, [r2, #0]
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8001314:	6891      	ldr	r1, [r2, #8]
 8001316:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800131a:	6091      	str	r1, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800131c:	22ff      	movs	r2, #255	; 0xff
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8001320:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8001322:	2301      	movs	r3, #1
 8001324:	776b      	strb	r3, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8001326:	7728      	strb	r0, [r5, #28]
  return HAL_OK;
 8001328:	e7cc      	b.n	80012c4 <HAL_RTC_SetAlarm_IT+0xbc>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800132a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800132e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001338:	60da      	str	r2, [r3, #12]
      if (count-- == 0U)
 800133a:	9a01      	ldr	r2, [sp, #4]
 800133c:	1e51      	subs	r1, r2, #1
 800133e:	9101      	str	r1, [sp, #4]
 8001340:	2a00      	cmp	r2, #0
 8001342:	d0ba      	beq.n	80012ba <HAL_RTC_SetAlarm_IT+0xb2>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	0792      	lsls	r2, r2, #30
 8001348:	d5f7      	bpl.n	800133a <HAL_RTC_SetAlarm_IT+0x132>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800134a:	6218      	str	r0, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800134c:	649c      	str	r4, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001354:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800135c:	e7d4      	b.n	8001308 <HAL_RTC_SetAlarm_IT+0x100>
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	40013c00 	.word	0x40013c00

08001368 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8001368:	0903      	lsrs	r3, r0, #4
 800136a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800136e:	f000 000f 	and.w	r0, r0, #15
 8001372:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001376:	b2c0      	uxtb	r0, r0
 8001378:	4770      	bx	lr

0800137a <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800137a:	6803      	ldr	r3, [r0, #0]
 800137c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800137e:	6048      	str	r0, [r1, #4]
{
 8001380:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001382:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001384:	681d      	ldr	r5, [r3, #0]
 8001386:	f005 337f 	and.w	r3, r5, #2139062143	; 0x7f7f7f7f
 800138a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800138e:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001392:	0c1e      	lsrs	r6, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001394:	6088      	str	r0, [r1, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001396:	f3c3 2406 	ubfx	r4, r3, #8, #7
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800139a:	f006 003f 	and.w	r0, r6, #63	; 0x3f
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800139e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80013a2:	f006 0640 	and.w	r6, r6, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80013a6:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80013a8:	704c      	strb	r4, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80013aa:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80013ac:	70ce      	strb	r6, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 80013ae:	b952      	cbnz	r2, 80013c6 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80013b0:	f7ff ffda 	bl	8001368 <RTC_Bcd2ToByte>
 80013b4:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff ffd6 	bl	8001368 <RTC_Bcd2ToByte>
 80013bc:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80013be:	4628      	mov	r0, r5
 80013c0:	f7ff ffd2 	bl	8001368 <RTC_Bcd2ToByte>
 80013c4:	7088      	strb	r0, [r1, #2]
}
 80013c6:	2000      	movs	r0, #0
 80013c8:	bd70      	pop	{r4, r5, r6, pc}

080013ca <HAL_RTC_GetDate>:
{
 80013ca:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80013cc:	6803      	ldr	r3, [r0, #0]
 80013ce:	685c      	ldr	r4, [r3, #4]
 80013d0:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 80013d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80013d8:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80013da:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80013de:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80013e2:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80013e6:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80013e8:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80013ea:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80013ec:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80013ee:	b952      	cbnz	r2, 8001406 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80013f0:	f7ff ffba 	bl	8001368 <RTC_Bcd2ToByte>
 80013f4:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80013f6:	4628      	mov	r0, r5
 80013f8:	f7ff ffb6 	bl	8001368 <RTC_Bcd2ToByte>
 80013fc:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff ffb2 	bl	8001368 <RTC_Bcd2ToByte>
 8001404:	7088      	strb	r0, [r1, #2]
}
 8001406:	2000      	movs	r0, #0
 8001408:	bd38      	pop	{r3, r4, r5, pc}

0800140a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:




void SysTick_Handler (void)
{
 800140c:	b508      	push	{r3, lr}
	HAL_IncTick();
 800140e:	f7ff f8a1 	bl	8000554 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
}
 8001412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SYSTICK_IRQHandler();
 8001416:	f7ff b92e 	b.w	8000676 <HAL_SYSTICK_IRQHandler>
	...

0800141c <RTC_Alarm_IRQHandler>:


void RTC_Alarm_IRQHandler(void)
{
	HAL_RTC_AlarmIRQHandler(&realTclock);
 800141c:	4801      	ldr	r0, [pc, #4]	; (8001424 <RTC_Alarm_IRQHandler+0x8>)
 800141e:	f7ff bd6d 	b.w	8000efc <HAL_RTC_AlarmIRQHandler>
 8001422:	bf00      	nop
 8001424:	20000030 	.word	0x20000030

08001428 <GPIO_Init>:




void GPIO_Init()
{
 8001428:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef gpio_for_rtc;
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	2100      	movs	r1, #0
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <GPIO_Init+0x3c>)
 800142e:	9100      	str	r1, [sp, #0]
 8001430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	gpio_for_rtc.Mode = GPIO_MODE_OUTPUT_PP;
	gpio_for_rtc.Pull = GPIO_NOPULL;
	gpio_for_rtc.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	gpio_for_rtc.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	HAL_GPIO_Init(GPIOD,&gpio_for_rtc);
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <GPIO_Init+0x40>)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001434:	f042 0208 	orr.w	r2, r2, #8
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	gpio_for_rtc.Pull = GPIO_NOPULL;
 800143c:	9103      	str	r1, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	9b00      	ldr	r3, [sp, #0]
	gpio_for_rtc.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	9302      	str	r3, [sp, #8]
	gpio_for_rtc.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800144a:	a906      	add	r1, sp, #24
	gpio_for_rtc.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	9304      	str	r3, [sp, #16]
	gpio_for_rtc.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001450:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001454:	f841 3d14 	str.w	r3, [r1, #-20]!
	HAL_GPIO_Init(GPIOD,&gpio_for_rtc);
 8001458:	f7ff f912 	bl	8000680 <HAL_GPIO_Init>
}
 800145c:	b007      	add	sp, #28
 800145e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40020c00 	.word	0x40020c00

0800146c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800146c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	2230      	movs	r2, #48	; 0x30
{
 8001470:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	eb0d 0002 	add.w	r0, sp, r2
 8001476:	2100      	movs	r1, #0
 8001478:	f000 f990 	bl	800179c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800147c:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147e:	2214      	movs	r2, #20
 8001480:	2100      	movs	r1, #0
 8001482:	a807      	add	r0, sp, #28
 8001484:	f000 f98a 	bl	800179c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001488:	462a      	mov	r2, r5
 800148a:	2100      	movs	r1, #0
 800148c:	a803      	add	r0, sp, #12
 800148e:	f000 f985 	bl	800179c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	2400      	movs	r4, #0
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <SystemClock_Config+0x90>)
 8001496:	9401      	str	r4, [sp, #4]
 8001498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800149e:	641a      	str	r2, [r3, #64]	; 0x40
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <SystemClock_Config+0x94>)
 80014ac:	9402      	str	r4, [sp, #8]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b8:	9510      	str	r5, [sp, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014c2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80014c4:	230a      	movs	r3, #10
 80014c6:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c8:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ca:	2301      	movs	r3, #1
 80014cc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014ce:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	f7ff f9be 	bl	8000850 <HAL_RCC_OscConfig>
  {

  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014d6:	4621      	mov	r1, r4
 80014d8:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014da:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014dc:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014de:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e0:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e2:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014e4:	f7ff fb88 	bl	8000bf8 <HAL_RCC_ClockConfig>
  {

  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014e8:	2302      	movs	r3, #2
 80014ea:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ec:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f2:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f4:	f7ff fc1c 	bl	8000d30 <HAL_RCCEx_PeriphCLKConfig>
  {

  }
}
 80014f8:	b019      	add	sp, #100	; 0x64
 80014fa:	bd30      	pop	{r4, r5, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000

08001504 <RTC_Init>:
void RTC_Init()
{
	realTclock.Instance = RTC;
 8001504:	4806      	ldr	r0, [pc, #24]	; (8001520 <RTC_Init+0x1c>)
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <RTC_Init+0x20>)
 8001508:	6003      	str	r3, [r0, #0]
	realTclock.Init.HourFormat = RTC_HOURFORMAT_24;
	realTclock.Init.AsynchPrediv = 0x7F;
 800150a:	227f      	movs	r2, #127	; 0x7f
	realTclock.Init.HourFormat = RTC_HOURFORMAT_24;
 800150c:	2300      	movs	r3, #0
	realTclock.Init.AsynchPrediv = 0x7F;
 800150e:	6082      	str	r2, [r0, #8]
	realTclock.Init.SynchPrediv = 0xFF;
 8001510:	22ff      	movs	r2, #255	; 0xff
	realTclock.Init.HourFormat = RTC_HOURFORMAT_24;
 8001512:	6043      	str	r3, [r0, #4]
	realTclock.Init.SynchPrediv = 0xFF;
 8001514:	60c2      	str	r2, [r0, #12]
	realTclock.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001516:	6103      	str	r3, [r0, #16]
	realTclock.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001518:	6143      	str	r3, [r0, #20]
	realTclock.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800151a:	6183      	str	r3, [r0, #24]
	HAL_RTC_Init(&realTclock);
 800151c:	f7ff bd4a 	b.w	8000fb4 <HAL_RTC_Init>
 8001520:	20000030 	.word	0x20000030
 8001524:	40002800 	.word	0x40002800

08001528 <RTC_CalendarConfig>:
}



void RTC_CalendarConfig(void)
{
 8001528:	b530      	push	{r4, r5, lr}
	RTC_TimeTypeDef rtc_time= {0};
	rtc_time.Hours = 12;
	rtc_time.Minutes = 45;
	rtc_time.Seconds = 00;
	//rtc_time.TimeFormat = RTC_HOURFORMAT12_PM;
	HAL_RTC_SetTime(&realTclock,&rtc_time,RTC_FORMAT_BIN);
 800152a:	4c12      	ldr	r4, [pc, #72]	; (8001574 <RTC_CalendarConfig+0x4c>)
{
 800152c:	b087      	sub	sp, #28
	RTC_TimeTypeDef rtc_time= {0};
 800152e:	2214      	movs	r2, #20
 8001530:	2100      	movs	r1, #0
 8001532:	a801      	add	r0, sp, #4
 8001534:	f000 f932 	bl	800179c <memset>
	rtc_time.Hours = 12;
 8001538:	250c      	movs	r5, #12
	rtc_time.Minutes = 45;
 800153a:	232d      	movs	r3, #45	; 0x2d
	HAL_RTC_SetTime(&realTclock,&rtc_time,RTC_FORMAT_BIN);
 800153c:	a901      	add	r1, sp, #4
 800153e:	2200      	movs	r2, #0
 8001540:	4620      	mov	r0, r4
	rtc_time.Minutes = 45;
 8001542:	f88d 3005 	strb.w	r3, [sp, #5]
	rtc_time.Hours = 12;
 8001546:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_RTC_SetTime(&realTclock,&rtc_time,RTC_FORMAT_BIN);
 800154a:	f7ff fd8c 	bl	8001066 <HAL_RTC_SetTime>


	RTC_DateTypeDef rtc_date= {0};
	rtc_date.Date = 12;
	rtc_date.Month = RTC_MONTH_JUNE;
 800154e:	2306      	movs	r3, #6
 8001550:	f88d 3001 	strb.w	r3, [sp, #1]
	rtc_date.Year = 18;
	rtc_date.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001554:	a906      	add	r1, sp, #24
	rtc_date.Year = 18;
 8001556:	2312      	movs	r3, #18
 8001558:	f88d 3003 	strb.w	r3, [sp, #3]
	rtc_date.WeekDay = RTC_WEEKDAY_TUESDAY;
 800155c:	2302      	movs	r3, #2
 800155e:	f801 3d18 	strb.w	r3, [r1, #-24]!
	HAL_RTC_SetDate(&realTclock,&rtc_date,RTC_FORMAT_BIN);
 8001562:	2200      	movs	r2, #0
 8001564:	4620      	mov	r0, r4
	rtc_date.Date = 12;
 8001566:	f88d 5002 	strb.w	r5, [sp, #2]
	HAL_RTC_SetDate(&realTclock,&rtc_date,RTC_FORMAT_BIN);
 800156a:	f7ff fdec 	bl	8001146 <HAL_RTC_SetDate>





}
 800156e:	b007      	add	sp, #28
 8001570:	bd30      	pop	{r4, r5, pc}
 8001572:	bf00      	nop
 8001574:	20000030 	.word	0x20000030

08001578 <RTC_AlarmConfig>:

void RTC_AlarmConfig()
{
 8001578:	b510      	push	{r4, lr}



	RTC_AlarmTypeDef rtc_alarm= {0};
	memset(&rtc_alarm,0,sizeof(rtc_alarm));
	HAL_RTC_DeactivateAlarm(&realTclock,RTC_ALARM_A);
 800157a:	4c10      	ldr	r4, [pc, #64]	; (80015bc <RTC_AlarmConfig+0x44>)
{
 800157c:	b08a      	sub	sp, #40	; 0x28
	memset(&rtc_alarm,0,sizeof(rtc_alarm));
 800157e:	2228      	movs	r2, #40	; 0x28
 8001580:	2100      	movs	r1, #0
 8001582:	4668      	mov	r0, sp
 8001584:	f000 f90a 	bl	800179c <memset>
	HAL_RTC_DeactivateAlarm(&realTclock,RTC_ALARM_A);
 8001588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff fc67 	bl	8000e60 <HAL_RTC_DeactivateAlarm>
	rtc_alarm.Alarm = RTC_ALARM_A;
 8001592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001596:	9309      	str	r3, [sp, #36]	; 0x24
	rtc_alarm.AlarmTime.Minutes =45;
 8001598:	232d      	movs	r3, #45	; 0x2d
 800159a:	f88d 3001 	strb.w	r3, [sp, #1]
	rtc_alarm.AlarmTime.Seconds =9;
 800159e:	2309      	movs	r3, #9
 80015a0:	f88d 3002 	strb.w	r3, [sp, #2]
	rtc_alarm.AlarmMask = RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY |RTC_ALARMMASK_MINUTES ;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <RTC_AlarmConfig+0x48>)
 80015a6:	9305      	str	r3, [sp, #20]
	rtc_alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
	HAL_RTC_SetAlarm_IT(&realTclock,&rtc_alarm,RTC_FORMAT_BIN);
 80015a8:	2200      	movs	r2, #0
	rtc_alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80015aa:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
	HAL_RTC_SetAlarm_IT(&realTclock,&rtc_alarm,RTC_FORMAT_BIN);
 80015ae:	4669      	mov	r1, sp
 80015b0:	4620      	mov	r0, r4
	rtc_alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80015b2:	9306      	str	r3, [sp, #24]
	HAL_RTC_SetAlarm_IT(&realTclock,&rtc_alarm,RTC_FORMAT_BIN);
 80015b4:	f7ff fe28 	bl	8001208 <HAL_RTC_SetAlarm_IT>
}
 80015b8:	b00a      	add	sp, #40	; 0x28
 80015ba:	bd10      	pop	{r4, pc}
 80015bc:	20000030 	.word	0x20000030
 80015c0:	80808000 	.word	0x80808000

080015c4 <main>:
{
 80015c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_Init();
 80015c6:	f7fe ffab 	bl	8000520 <HAL_Init>
	SystemClock_Config();
 80015ca:	f7ff ff4f 	bl	800146c <SystemClock_Config>
	GPIO_Init();
 80015ce:	f7ff ff2b 	bl	8001428 <GPIO_Init>
	RTC_Init();
 80015d2:	f7ff ff97 	bl	8001504 <RTC_Init>
	RTC_CalendarConfig();
 80015d6:	f7ff ffa7 	bl	8001528 <RTC_CalendarConfig>
	RTC_AlarmConfig();
 80015da:	f7ff ffcd 	bl	8001578 <RTC_AlarmConfig>
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80015de:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80015e2:	4813      	ldr	r0, [pc, #76]	; (8001630 <main+0x6c>)
		HAL_RTC_GetTime(&realTclock,&RTC_Timeread,RTC_FORMAT_BIN);
 80015e4:	4c13      	ldr	r4, [pc, #76]	; (8001634 <main+0x70>)
		Hours = RTC_Timeread.Hours;
 80015e6:	4d14      	ldr	r5, [pc, #80]	; (8001638 <main+0x74>)
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80015e8:	f7ff f92a 	bl	8000840 <HAL_GPIO_TogglePin>
	RTC_TimeTypeDef RTC_Timeread = {0};
 80015ec:	2214      	movs	r2, #20
 80015ee:	2100      	movs	r1, #0
 80015f0:	a801      	add	r0, sp, #4
 80015f2:	f000 f8d3 	bl	800179c <memset>
    RTC_DateTypeDef RTC_Dateread = {0};
 80015f6:	2300      	movs	r3, #0
 80015f8:	9300      	str	r3, [sp, #0]
		HAL_Delay(1000);
 80015fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015fe:	f7fe ffbb 	bl	8000578 <HAL_Delay>
		HAL_RTC_GetTime(&realTclock,&RTC_Timeread,RTC_FORMAT_BIN);
 8001602:	2200      	movs	r2, #0
 8001604:	a901      	add	r1, sp, #4
 8001606:	4620      	mov	r0, r4
 8001608:	f7ff feb7 	bl	800137a <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&realTclock,&RTC_Dateread,RTC_FORMAT_BIN);
 800160c:	2200      	movs	r2, #0
 800160e:	4669      	mov	r1, sp
 8001610:	4620      	mov	r0, r4
 8001612:	f7ff feda 	bl	80013ca <HAL_RTC_GetDate>
		Hours = RTC_Timeread.Hours;
 8001616:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800161a:	702b      	strb	r3, [r5, #0]
		Minutes = RTC_Timeread.Minutes;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <main+0x78>)
 800161e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001622:	701a      	strb	r2, [r3, #0]
		Seconds = RTC_Timeread.Seconds;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <main+0x7c>)
 8001626:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800162a:	701a      	strb	r2, [r3, #0]
 800162c:	e7e5      	b.n	80015fa <main+0x36>
 800162e:	bf00      	nop
 8001630:	40020c00 	.word	0x40020c00
 8001634:	20000030 	.word	0x20000030
 8001638:	2000002c 	.word	0x2000002c
 800163c:	20000050 	.word	0x20000050
 8001640:	20000051 	.word	0x20000051

08001644 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8001644:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001648:	4801      	ldr	r0, [pc, #4]	; (8001650 <HAL_RTC_AlarmAEventCallback+0xc>)
 800164a:	f7ff b8f9 	b.w	8000840 <HAL_GPIO_TogglePin>
 800164e:	bf00      	nop
 8001650:	40020c00 	.word	0x40020c00

08001654 <HAL_MspInit>:
#include "main.h"

extern RTC_HandleTypeDef realTclock;

void HAL_MspInit(void)
{
 8001654:	b513      	push	{r0, r1, r4, lr}
	//1- set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001656:	2003      	movs	r0, #3
 8001658:	f7fe ffa2 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
	//2-enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 7<<16; //usage fault, memory fault and bus fault system exception
 800165c:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_MspInit+0x68>)
 800165e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001660:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001664:	6253      	str	r3, [r2, #36]	; 0x24
	//3-set the priority of the exceptions
	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2400      	movs	r4, #0
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_MspInit+0x6c>)
 800166a:	9400      	str	r4, [sp, #0]
 800166c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800166e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001672:	645a      	str	r2, [r3, #68]	; 0x44
 8001674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001676:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800167a:	9200      	str	r2, [sp, #0]
 800167c:	9a00      	ldr	r2, [sp, #0]
	  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	9401      	str	r4, [sp, #4]
 8001680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001682:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001686:	641a      	str	r2, [r3, #64]	; 0x40
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);//Both sub and first priority is highest
 8001690:	4622      	mov	r2, r4
 8001692:	4621      	mov	r1, r4
 8001694:	f06f 000b 	mvn.w	r0, #11
	  __HAL_RCC_PWR_CLK_ENABLE();
 8001698:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);//Both sub and first priority is highest
 800169a:	f7fe ff93 	bl	80005c4 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);//Both sub and first priority is highest
 800169e:	4622      	mov	r2, r4
 80016a0:	4621      	mov	r1, r4
 80016a2:	f06f 000a 	mvn.w	r0, #10
 80016a6:	f7fe ff8d 	bl	80005c4 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);//Both sub and first priority is highes
 80016aa:	4622      	mov	r2, r4
 80016ac:	4621      	mov	r1, r4
 80016ae:	f06f 0009 	mvn.w	r0, #9
 80016b2:	f7fe ff87 	bl	80005c4 <HAL_NVIC_SetPriority>

}
 80016b6:	b002      	add	sp, #8
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016c4:	b508      	push	{r3, lr}
		  {

		  }
*/
		  //3. Enable the RTC Clock
		  __HAL_RCC_RTC_ENABLE();
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_RTC_MspInit+0x1c>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

		  //4. Enable the RTC Alarm IRQ in the NVIC
		  HAL_NVIC_SetPriority(RTC_Alarm_IRQn,15,0);
 80016cc:	2029      	movs	r0, #41	; 0x29
 80016ce:	2200      	movs	r2, #0
 80016d0:	210f      	movs	r1, #15
 80016d2:	f7fe ff77 	bl	80005c4 <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016d6:	2029      	movs	r0, #41	; 0x29
}
 80016d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016dc:	f7fe bfa6 	b.w	800062c <HAL_NVIC_EnableIRQ>
 80016e0:	42470e3c 	.word	0x42470e3c

080016e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SystemInit+0x18>)
 80016e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80016ea:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80016ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001738 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001704:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001706:	e003      	b.n	8001710 <LoopCopyDataInit>

08001708 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800170a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800170c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800170e:	3104      	adds	r1, #4

08001710 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001710:	480b      	ldr	r0, [pc, #44]	; (8001740 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001714:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001716:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001718:	d3f6      	bcc.n	8001708 <CopyDataInit>
  ldr  r2, =_sbss
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800171c:	e002      	b.n	8001724 <LoopFillZerobss>

0800171e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800171e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001720:	f842 3b04 	str.w	r3, [r2], #4

08001724 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001726:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001728:	d3f9      	bcc.n	800171e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800172a:	f7ff ffdb 	bl	80016e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172e:	f000 f811 	bl	8001754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001732:	f7ff ff47 	bl	80015c4 <main>
  bx  lr    
 8001736:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001738:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800173c:	080017e4 	.word	0x080017e4
  ldr  r0, =_sdata
 8001740:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001744:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001748:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800174c:	20000054 	.word	0x20000054

08001750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC_IRQHandler>
	...

08001754 <__libc_init_array>:
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	4e0d      	ldr	r6, [pc, #52]	; (800178c <__libc_init_array+0x38>)
 8001758:	4c0d      	ldr	r4, [pc, #52]	; (8001790 <__libc_init_array+0x3c>)
 800175a:	1ba4      	subs	r4, r4, r6
 800175c:	10a4      	asrs	r4, r4, #2
 800175e:	2500      	movs	r5, #0
 8001760:	42a5      	cmp	r5, r4
 8001762:	d109      	bne.n	8001778 <__libc_init_array+0x24>
 8001764:	4e0b      	ldr	r6, [pc, #44]	; (8001794 <__libc_init_array+0x40>)
 8001766:	4c0c      	ldr	r4, [pc, #48]	; (8001798 <__libc_init_array+0x44>)
 8001768:	f000 f820 	bl	80017ac <_init>
 800176c:	1ba4      	subs	r4, r4, r6
 800176e:	10a4      	asrs	r4, r4, #2
 8001770:	2500      	movs	r5, #0
 8001772:	42a5      	cmp	r5, r4
 8001774:	d105      	bne.n	8001782 <__libc_init_array+0x2e>
 8001776:	bd70      	pop	{r4, r5, r6, pc}
 8001778:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800177c:	4798      	blx	r3
 800177e:	3501      	adds	r5, #1
 8001780:	e7ee      	b.n	8001760 <__libc_init_array+0xc>
 8001782:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001786:	4798      	blx	r3
 8001788:	3501      	adds	r5, #1
 800178a:	e7f2      	b.n	8001772 <__libc_init_array+0x1e>
 800178c:	080017dc 	.word	0x080017dc
 8001790:	080017dc 	.word	0x080017dc
 8001794:	080017dc 	.word	0x080017dc
 8001798:	080017e0 	.word	0x080017e0

0800179c <memset>:
 800179c:	4402      	add	r2, r0
 800179e:	4603      	mov	r3, r0
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d100      	bne.n	80017a6 <memset+0xa>
 80017a4:	4770      	bx	lr
 80017a6:	f803 1b01 	strb.w	r1, [r3], #1
 80017aa:	e7f9      	b.n	80017a0 <memset+0x4>

080017ac <_init>:
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ae:	bf00      	nop
 80017b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b2:	bc08      	pop	{r3}
 80017b4:	469e      	mov	lr, r3
 80017b6:	4770      	bx	lr

080017b8 <_fini>:
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	bf00      	nop
 80017bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017be:	bc08      	pop	{r3}
 80017c0:	469e      	mov	lr, r3
 80017c2:	4770      	bx	lr
